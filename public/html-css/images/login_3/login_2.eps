%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2007.i039.019.P.m004.c33.cyber security spyware data protection isometric set-06.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 2/26/2021
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 6 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2007.i039.019.P.m004.c33.cyber security spyware data protection isometric set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-02-26T00:20:20+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-02-26T00:20:20+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-02-26T00:20:19+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7z+aMU8nl+3EMskLLeRN&#xA;6kTyxkEK/CrQsjj4+NKHrTDFlAWd3liedvOOjSItzfzalaPI3pXMwMFwJEorEqBQqWqOgHQBTu2R&#xA;1EOEE3y/Gx/R9zuNDPHknHGYC5bA/wDFD9Io9d3pnlj8yrLUUVLrclgnroKEFq8RLHuQTTqtRmNj&#xA;1II/H2tuu7DniO23Wv8AiT+g0Wb5lOgdirsVdirE/wAyNc1jTNGjj0f0/r16zwqZSUAX0nqVkDKY&#xA;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&#xA;xO5ERW/VlKRlzNv/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:d690075f-6522-894e-8b3e-4c2db0ea2ea0</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:d690075f-6522-894e-8b3e-4c2db0ea2ea0</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:05265a43-5e58-483b-a637-f47ea9136070</stRef:instanceID>
            <stRef:documentID>xmp.did:80419ee9-c7ae-f14e-9eab-8f0d19356d16</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:80fef2d3-8a7f-fb49-8b37-9e7aba5b5acb</stEvt:instanceID>
                  <stEvt:when>2020-07-28T16:27:20+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:47aa5425-7308-fb41-ae58-a3384e44029d</stEvt:instanceID>
                  <stEvt:when>2020-07-30T12:25:03+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:92f6a377-a2db-5d49-b1f1-0abb0126b000</stEvt:instanceID>
                  <stEvt:when>2020-07-30T22:28:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:43b34548-8e27-d14d-8347-94521aff7776</stEvt:instanceID>
                  <stEvt:when>2020-07-30T22:29:05+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:80419ee9-c7ae-f14e-9eab-8f0d19356d16</stEvt:instanceID>
                  <stEvt:when>2021-02-25T17:34:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d690075f-6522-894e-8b3e-4c2db0ea2ea0</stEvt:instanceID>
                  <stEvt:when>2021-02-26T00:20:20+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=243 G=242 B=252</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>243</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>252</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=218 G=218 B=249</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>218</xmpG:red>
                           <xmpG:green>218</xmpG:green>
                           <xmpG:blue>249</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=211 G=211 B=245</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>211</xmpG:red>
                           <xmpG:green>211</xmpG:green>
                           <xmpG:blue>245</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=218 G=218 B=249 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>218</xmpG:red>
                           <xmpG:green>218</xmpG:green>
                           <xmpG:blue>249</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=191 G=190 B=237</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>191</xmpG:red>
                           <xmpG:green>190</xmpG:green>
                           <xmpG:blue>237</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=244 G=244 B=250</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>244</xmpG:red>
                           <xmpG:green>244</xmpG:green>
                           <xmpG:blue>250</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
125.149 112.563 mo
128.348 114.422 li
125.149 112.563 li
125.826 111.974 126.535 111.459 127.266 111.037 cv
210.065 63.2325 li
217.358 67.4705 li
134.558 115.275 li
133.827 115.697 133.117 116.212 132.441 116.801 cv
131.044 118.016 129.787 119.547 128.762 121.229 cv
121.47 116.991 li
122.494 115.309 123.753 113.778 125.149 112.563 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.956863 .956863 .980392 rgb
f
134.558 115.275 mo
127.266 111.037 li
122.534 113.769 118.711 120.391 118.727 125.827 cv
126.02 130.065 li
126.004 124.628 129.826 118.007 134.558 115.275 cv
cp
f
219.658 289.896 mo
217.995 292.205 li
222.727 289.473 226.55 282.852 226.534 277.416 cv
225.351 280.036 li
225.364 283.656 222.81 288.079 219.658 289.896 cv
cp
.74902 .745098 .929412 rgb
f
136.858 337.701 mo
135.195 340.01 li
217.995 292.205 li
219.658 289.896 li
136.858 337.701 li
cp
f
131.217 335.525 mo
126.734 336.748 li
127.027 338.464 127.783 339.728 128.863 340.459 cv
132.637 337.999 li
131.917 337.512 131.412 336.67 131.217 335.525 cv
cp
.956863 .956863 .980392 rgb
f
132.637 337.999 mo
128.863 340.459 li
130.435 341.522 132.691 341.456 135.195 340.01 cv
136.858 337.701 li
135.191 338.665 133.686 338.708 132.637 337.999 cv
cp
.74902 .745098 .929412 rgb
f
121.807 336.368 mo
129.099 340.607 li
127.562 339.713 126.608 337.813 126.6 335.112 cv
119.309 330.874 li
119.316 333.576 120.269 335.476 121.807 336.368 cv
cp
f
gsave
121.807 336.368 mo
129.099 340.607 li
127.562 339.713 126.608 337.813 126.6 335.112 cv
119.309 330.874 li
119.316 333.576 120.269 335.476 121.807 336.368 cv
clp
126.6 335.112 mo
119.309 330.874 li
119.316 333.576 120.269 335.476 121.807 336.368 cv
129.099 340.607 li
127.562 339.713 126.608 337.813 126.6 335.112 cv
cp
f
grestore
225.351 280.036 mo
226.534 277.416 li
225.953 72.3681 li
224.77 74.9887 li
225.351 280.036 li
f
224.77 74.9886 mo
225.953 72.3681 li
225.95 71.509 225.852 70.7311 225.67 70.0404 cv
224.582 73.4377 li
224.703 73.8974 224.769 74.4161 224.77 74.9886 cv
cp
f
224.582 73.4377 mo
225.67 70.0404 li
225.248 68.4421 224.376 67.3133 223.197 66.7364 cv
222.933 71.2346 li
223.718 71.6199 224.301 72.3721 224.582 73.4377 cv
cp
.956863 .956863 .980392 rgb
f
222.933 71.2346 mo
223.197 66.7364 li
222.12 66.2087 220.787 66.1429 219.308 66.6012 cv
220.339 71.1439 li
221.324 70.8389 222.214 70.8829 222.933 71.2346 cv
cp
f
220.339 71.1439 mo
219.308 66.6012 li
218.681 66.7953 218.028 67.0834 217.358 67.4705 cv
219.04 71.7233 li
219.487 71.4648 219.921 71.2726 220.339 71.1439 cv
cp
f
223.454 66.8734 mo
216.162 62.6354 li
214.604 61.7303 212.447 61.8586 210.066 63.2325 cv
217.358 67.4705 li
219.739 66.0963 221.896 65.968 223.454 66.8734 cv
cp
f
gsave
223.454 66.8735 mo
216.162 62.6355 li
214.604 61.7304 212.447 61.8586 210.066 63.2325 cv
217.358 67.4705 li
219.739 66.0962 221.896 65.968 223.454 66.8735 cv
clp
223.454 66.8734 mo
216.162 62.6354 li
215.217 62.0867 214.052 61.9183 212.751 62.176 cv
220.043 66.4136 li
221.345 66.1556 222.509 66.3247 223.454 66.8734 cv
cp
f
220.043 66.4136 mo
212.751 62.176 li
211.906 62.3434 211.003 62.6915 210.066 63.2325 cv
217.358 67.4705 li
218.296 66.9294 219.198 66.5814 220.043 66.4136 cv
cp
f
grestore
130.547 129.388 mo
131.128 334.436 li
131.129 334.824 131.159 335.188 131.217 335.525 cv
126.734 336.748 li
126.647 336.241 126.602 335.695 126.6 335.112 cv
126.02 130.065 li
130.547 129.388 li
cp
f
126.02 130.065 mo
118.727 125.827 li
119.309 330.874 li
126.6 335.112 li
126.02 130.065 li
cp
.74902 .745098 .929412 rgb
f
219.04 71.7233 mo
217.358 67.4705 li
134.558 115.275 li
136.24 119.528 li
219.04 71.7233 li
cp
.956863 .956863 .980392 rgb
f
136.24 119.528 mo
133.088 121.345 130.535 125.768 130.547 129.388 cv
131.128 334.436 li
131.137 338.058 133.707 339.522 136.858 337.701 cv
219.658 289.896 li
222.81 288.079 225.364 283.656 225.351 280.036 cv
224.77 74.9887 li
224.761 71.3662 222.192 69.9016 219.04 71.7233 cv
136.24 119.528 li
f
136.24 119.528 mo
134.558 115.275 li
130.85 117.415 127.702 121.944 126.519 126.419 cv
130.879 126.959 li
131.668 123.975 133.771 120.952 136.24 119.528 cv
cp
f
130.879 126.959 mo
126.519 126.419 li
126.193 127.656 126.016 128.888 126.02 130.065 cv
130.547 129.388 li
130.545 128.605 130.662 127.784 130.879 126.959 cv
cp
f
128.762 121.229 mo
121.47 116.991 li
120.29 118.928 119.418 121.065 119.002 123.152 cv
126.293 127.39 li
126.711 125.303 127.582 123.165 128.762 121.229 cv
cp
f
126.293 127.39 mo
119.002 123.152 li
118.82 124.06 118.725 124.959 118.727 125.827 cv
126.02 130.065 li
126.016 129.197 126.112 128.298 126.293 127.39 cv
cp
.74902 .745098 .929412 rgb
f
130.938 328.085 mo
130.938 329.171 131.172 330.067 131.59 330.735 cv
132.546 332.293 134.463 332.625 136.667 331.348 cv
136.667 331.348 220.312 283.004 220.714 282.668 cv
223.266 280.544 225.172 276.814 225.161 273.686 cv
224.575 74.9723 li
224.569 71.3511 222.001 69.8847 218.846 71.7038 cv
136.048 119.51 li
133.627 120.906 131.552 123.849 130.738 126.786 cv
130.591 127.308 130.482 127.829 130.417 128.339 cv
130.374 128.687 130.938 328.085 130.938 328.085 cv
.227451 .172549 .6 rgb
f
160.347 117.312 mo
195.551 96.9875 li
197.527 95.8471 199.329 93.5042 200.194 90.9542 cv
203.988 79.7601 li
151.91 109.826 li
155.705 116.639 li
156.569 118.191 158.371 118.452 160.347 117.312 cv
cp
.956863 .956863 .980392 rgb
f
164.233 108.805 mo
164.179 111.244 162.381 114.184 160.226 115.358 cv
159.661 115.665 159.114 115.822 158.644 115.81 cv
158.222 115.799 157.87 115.655 157.601 115.393 cv
157.182 114.988 156.959 114.302 156.98 113.403 cv
157.034 110.963 158.832 108.024 160.987 106.851 cv
161.551 106.543 162.099 106.387 162.57 106.399 cv
162.802 106.404 163.012 106.451 163.198 106.535 cv
163.882 106.84 164.259 107.643 164.233 108.805 cv
cp
f
163.82 108.525 mo
163.766 110.965 161.967 113.905 159.813 115.078 cv
159.249 115.385 158.701 115.541 158.23 115.53 cv
157.998 115.524 157.788 115.477 157.601 115.393 cv
157.182 114.988 156.959 114.302 156.98 113.403 cv
157.034 110.963 158.832 108.024 160.987 106.851 cv
161.551 106.543 162.099 106.387 162.57 106.399 cv
162.802 106.404 163.012 106.451 163.198 106.535 cv
163.617 106.938 163.84 107.625 163.82 108.525 cv
cp
.74902 .745098 .929412 rgb
f
158.238 115.186 mo
158.079 115.181 157.931 115.153 157.798 115.102 cv
157.475 114.755 157.307 114.158 157.324 113.411 cv
157.376 111.08 159.093 108.273 161.152 107.154 cv
161.662 106.875 162.15 106.733 162.561 106.743 cv
162.721 106.747 162.869 106.775 163.001 106.826 cv
163.325 107.171 163.492 107.768 163.475 108.518 cv
163.424 110.849 161.707 113.655 159.648 114.775 cv
159.137 115.054 158.65 115.196 158.238 115.186 cv
cp
.227451 .172549 .6 rgb
f
160.924 108.292 mo
160.917 108.583 160.703 108.932 160.447 109.071 cv
160.192 109.211 159.99 109.088 159.997 108.796 cv
160.004 108.505 160.218 108.156 160.474 108.017 cv
160.73 107.878 160.931 108.001 160.924 108.292 cv
cp
f
159.797 108.965 mo
159.919 109.148 159.835 109.512 159.61 109.778 cv
159.385 110.044 159.103 110.112 158.982 109.929 cv
158.859 109.747 158.944 109.383 159.169 109.117 cv
159.395 108.85 159.676 108.782 159.797 108.965 cv
cp
f
158.832 110.174 mo
159.05 110.199 159.118 110.48 158.983 110.801 cv
158.849 111.124 158.564 111.364 158.346 111.339 cv
158.128 111.314 158.06 111.033 158.194 110.711 cv
158.328 110.389 158.614 110.149 158.832 110.174 cv
cp
f
158.287 111.594 mo
158.543 111.455 158.745 111.578 158.737 111.869 cv
158.73 112.16 158.516 112.51 158.261 112.649 cv
158.004 112.789 157.803 112.665 157.81 112.374 cv
157.818 112.083 158.031 111.733 158.287 111.594 cv
cp
f
158.308 112.846 mo
158.533 112.58 158.814 112.512 158.936 112.695 cv
159.058 112.877 158.973 113.241 158.749 113.506 cv
158.523 113.773 158.242 113.841 158.12 113.659 cv
157.999 113.476 158.083 113.112 158.308 112.846 cv
cp
f
158.889 113.593 mo
159.024 113.271 159.309 113.031 159.527 113.056 cv
159.745 113.081 159.813 113.362 159.679 113.684 cv
159.545 114.006 159.259 114.246 159.041 114.221 cv
158.823 114.196 158.755 113.915 158.889 113.593 cv
cp
f
159.876 113.636 mo
159.883 113.346 160.097 112.996 160.352 112.857 cv
160.608 112.717 160.809 112.841 160.802 113.132 cv
160.795 113.423 160.582 113.772 160.326 113.912 cv
160.07 114.05 159.868 113.928 159.876 113.636 cv
cp
f
161.002 112.963 mo
160.881 112.781 160.965 112.417 161.19 112.151 cv
161.415 111.884 161.696 111.817 161.818 111.999 cv
161.94 112.182 161.856 112.546 161.63 112.812 cv
161.405 113.078 161.124 113.146 161.002 112.963 cv
cp
f
161.967 111.755 mo
161.749 111.729 161.682 111.449 161.816 111.127 cv
161.95 110.805 162.236 110.564 162.454 110.589 cv
162.672 110.614 162.74 110.895 162.605 111.218 cv
162.471 111.539 162.185 111.78 161.967 111.755 cv
cp
f
162.513 110.334 mo
162.257 110.473 162.055 110.35 162.063 110.059 cv
162.07 109.768 162.283 109.419 162.539 109.279 cv
162.795 109.14 162.996 109.264 162.989 109.555 cv
162.982 109.846 162.768 110.195 162.513 110.334 cv
cp
f
162.492 109.082 mo
162.266 109.348 161.985 109.417 161.863 109.234 cv
161.742 109.052 161.826 108.688 162.052 108.422 cv
162.276 108.155 162.558 108.087 162.679 108.27 cv
162.801 108.453 162.717 108.816 162.492 109.082 cv
cp
f
161.91 108.335 mo
161.776 108.657 161.49 108.898 161.272 108.872 cv
161.054 108.848 160.987 108.566 161.121 108.245 cv
161.255 107.923 161.54 107.682 161.758 107.707 cv
161.977 107.732 162.044 108.013 161.91 108.335 cv
cp
f
161.484 110.374 mo
161.467 111.055 160.968 111.872 160.369 112.198 cv
159.77 112.525 159.298 112.236 159.315 111.555 cv
159.332 110.872 159.832 110.056 160.431 109.73 cv
161.03 109.404 161.501 109.692 161.484 110.374 cv
cp
f
175.721 102.123 mo
175.667 104.563 173.87 107.503 171.714 108.677 cv
171.149 108.984 170.602 109.14 170.132 109.128 cv
169.71 109.118 169.359 108.973 169.089 108.712 cv
168.671 108.306 168.448 107.621 168.468 106.722 cv
168.522 104.281 170.32 101.342 172.475 100.169 cv
173.039 99.8617 173.587 99.7052 174.058 99.7175 cv
174.29 99.7229 174.5 99.7692 174.686 99.853 cv
175.37 100.158 175.748 100.961 175.721 102.123 cv
cp
.956863 .956863 .980392 rgb
f
175.308 101.844 mo
175.254 104.284 173.456 107.224 171.301 108.396 cv
170.737 108.704 170.19 108.86 169.718 108.848 cv
169.487 108.842 169.276 108.796 169.089 108.712 cv
168.671 108.306 168.448 107.621 168.468 106.722 cv
168.522 104.281 170.32 101.342 172.475 100.169 cv
173.039 99.8617 173.587 99.7052 174.058 99.7175 cv
174.29 99.7229 174.5 99.7692 174.686 99.853 cv
175.105 100.257 175.329 100.944 175.308 101.844 cv
cp
.74902 .745098 .929412 rgb
f
169.727 108.504 mo
169.567 108.5 169.419 108.472 169.286 108.42 cv
168.963 108.073 168.795 107.476 168.813 106.73 cv
168.864 104.399 170.582 101.591 172.64 100.472 cv
173.151 100.193 173.638 100.051 174.05 100.062 cv
174.209 100.066 174.357 100.093 174.49 100.145 cv
174.813 100.49 174.98 101.087 174.964 101.836 cv
174.912 104.167 173.195 106.974 171.136 108.094 cv
170.625 108.372 170.138 108.514 169.727 108.504 cv
cp
.227451 .172549 .6 rgb
f
172.412 101.61 mo
172.405 101.902 172.192 102.251 171.935 102.39 cv
171.68 102.529 171.478 102.406 171.485 102.115 cv
171.493 101.823 171.706 101.475 171.962 101.336 cv
172.218 101.196 172.419 101.319 172.412 101.61 cv
cp
f
171.286 102.284 mo
171.407 102.466 171.323 102.83 171.098 103.096 cv
170.872 103.362 170.591 103.43 170.47 103.247 cv
170.348 103.065 170.432 102.701 170.657 102.435 cv
170.883 102.169 171.164 102.101 171.286 102.284 cv
cp
f
170.32 103.492 mo
170.538 103.517 170.606 103.798 170.471 104.12 cv
170.338 104.442 170.052 104.683 169.834 104.658 cv
169.616 104.632 169.548 104.351 169.682 104.03 cv
169.817 103.708 170.103 103.468 170.32 103.492 cv
cp
f
169.775 104.913 mo
170.031 104.773 170.233 104.897 170.225 105.188 cv
170.218 105.479 170.005 105.828 169.749 105.967 cv
169.492 106.106 169.291 105.984 169.298 105.692 cv
169.306 105.401 169.52 105.051 169.775 104.913 cv
cp
f
169.796 106.165 mo
170.022 105.898 170.302 105.83 170.424 106.013 cv
170.546 106.195 170.462 106.559 170.237 106.825 cv
170.011 107.091 169.731 107.159 169.608 106.977 cv
169.487 106.794 169.571 106.431 169.796 106.165 cv
cp
f
170.377 106.912 mo
170.512 106.59 170.798 106.349 171.016 106.374 cv
171.233 106.399 171.301 106.68 171.167 107.002 cv
171.033 107.324 170.747 107.565 170.529 107.54 cv
170.311 107.515 170.244 107.234 170.377 106.912 cv
cp
f
171.364 106.954 mo
171.371 106.663 171.585 106.314 171.84 106.175 cv
172.097 106.036 172.298 106.159 172.291 106.45 cv
172.283 106.742 172.07 107.09 171.814 107.23 cv
171.558 107.369 171.357 107.246 171.364 106.954 cv
cp
f
172.491 106.281 mo
172.368 106.099 172.453 105.735 172.679 105.469 cv
172.904 105.203 173.185 105.135 173.306 105.317 cv
173.428 105.5 173.344 105.864 173.118 106.13 cv
172.894 106.396 172.612 106.464 172.491 106.281 cv
cp
f
173.456 105.073 mo
173.237 105.048 173.17 104.767 173.304 104.445 cv
173.439 104.123 173.724 103.882 173.942 103.907 cv
174.16 103.932 174.227 104.214 174.093 104.536 cv
173.959 104.857 173.674 105.098 173.456 105.073 cv
cp
f
174.001 103.653 mo
173.745 103.792 173.544 103.669 173.551 103.378 cv
173.558 103.086 173.772 102.737 174.027 102.598 cv
174.283 102.459 174.485 102.582 174.477 102.873 cv
174.47 103.165 174.257 103.513 174.001 103.653 cv
cp
f
173.98 102.401 mo
173.755 102.668 173.473 102.735 173.352 102.553 cv
173.231 102.37 173.314 102.006 173.54 101.739 cv
173.764 101.473 174.046 101.406 174.167 101.588 cv
174.289 101.771 174.205 102.135 173.98 102.401 cv
cp
f
173.398 101.654 mo
173.264 101.975 172.979 102.216 172.76 102.191 cv
172.542 102.166 172.475 101.885 172.609 101.563 cv
172.744 101.241 173.029 101.001 173.247 101.026 cv
173.465 101.05 173.533 101.332 173.398 101.654 cv
cp
f
172.972 103.693 mo
172.955 104.374 172.456 105.191 171.857 105.517 cv
171.258 105.843 170.786 105.554 170.804 104.873 cv
170.82 104.191 171.32 103.375 171.919 103.048 cv
172.518 102.723 172.989 103.011 172.972 103.693 cv
cp
f
181.412 100.211 mo
185.783 97.6872 li
186.599 97.2162 187.267 96.06 187.267 95.1173 cv
187.267 94.175 186.599 93.7894 185.783 94.261 cv
181.412 96.7839 li
180.596 97.2553 179.929 98.4112 179.929 99.3542 cv
179.929 100.296 180.596 100.681 181.412 100.211 cv
cp
.137255 .0941176 .411765 rgb
f
237.931 258.224 mo
238.08 258.121 238.293 258.128 238.467 258.198 cv
238.64 258.268 238.782 258.391 238.919 258.512 cv
240.225 259.666 241.641 261.163 242.765 262.467 cv
242.671 262.41 li
242.833 262.591 242.988 262.778 243.134 262.972 cv
243.212 263.086 li
243.732 263.226 244.257 263.404 244.605 263.784 cv
244.847 264.048 244.975 264.385 245.067 264.718 cv
245.221 265.276 245.377 266.949 245.356 267.521 cv
245.35 267.675 245 268.108 244.768 268.15 cv
244.702 268.099 li
244.687 268.148 li
244.291 268.453 243.956 268.827 243.708 269.246 cv
243.502 269.592 243.108 269.515 242.699 269.638 cv
241.177 267.773 239.258 266.789 238.131 264.705 cv
237.99 264.445 237.864 264.158 237.922 263.876 cv
237.978 263.595 238.298 263.349 238.593 263.45 cv
238.458 263.182 238.521 262.845 238.745 262.641 cv
238.967 262.438 239.333 262.383 239.622 262.509 cv
239.551 262.252 239.707 261.972 239.954 261.843 cv
240.07 261.783 240.201 261.753 240.336 261.749 cv
239.622 261.056 238.974 260.378 238.278 259.498 cv
238.05 259.21 237.672 258.845 237.753 258.502 cv
237.778 258.394 237.836 258.289 237.931 258.224 cv
cp
.976471 .835294 .764706 rgb
f
282.71 363.467 mo
282.606 363.138 282.396 362.961 281.799 362.912 cv
281.093 362.854 280.384 362.822 279.677 362.777 cv
278.719 362.717 277.763 362.655 276.805 362.594 cv
276.853 361.819 276.876 361.032 276.961 360.262 cv
275.944 360.479 275.378 360.182 274.404 359.821 cv
273.257 359.398 272.092 359.014 270.918 358.672 cv
270.416 358.527 269.889 358.387 269.376 358.492 cv
268.083 358.756 267.377 360.885 267.551 362.003 cv
267.674 362.794 268.209 363.467 268.838 363.963 cv
269.78 364.706 271.107 365.311 272.294 365.489 cv
273.566 365.68 274.735 366.076 275.76 366.879 cv
277.086 367.917 278.032 369.013 279.789 369.138 cv
281.554 369.264 283.017 368.194 283.085 366.371 cv
283.109 365.717 282.994 365.068 282.88 364.424 cv
282.808 364.02 282.786 363.704 282.71 363.467 cv
cp
.74902 .745098 .929412 rgb
f
273.747 366.664 mo
273.746 366.524 273.749 366.385 273.758 366.245 cv
273.851 364.81 273.3 363.599 272.776 362.272 cv
272.582 361.778 272.369 361.259 271.954 360.928 cv
271.006 360.174 269.504 360.835 268.903 361.887 cv
268.624 362.374 268.47 362.923 268.22 363.426 cv
267.744 364.38 266.789 365.519 265.637 365.571 cv
264.089 365.64 262.35 365.108 260.781 365.013 cv
260.17 364.976 259.537 364.955 258.97 365.185 cv
257.633 365.726 257.247 367.883 257.724 369.088 cv
258.019 369.831 258.689 370.369 259.412 370.714 cv
260.496 371.23 261.924 371.527 263.122 371.437 cv
264.405 371.342 265.631 371.471 266.809 372.025 cv
268.83 372.979 271.179 374.35 273.219 372.491 cv
273.765 371.995 274.031 371.251 274.095 370.516 cv
274.207 369.215 273.766 367.955 273.747 366.664 cv
cp
f
279.618 307.086 mo
278.67 308.094 274.954 306.374 274.892 305.893 cv
270.442 302.615 271.29 316.12 272.677 321.461 cv
273.42 324.34 273.317 327.359 273.791 330.29 cv
274.318 333.556 275.088 336.784 276.093 339.938 cv
276.31 340.619 276.553 341.322 277.056 341.83 cv
278.094 342.88 279.803 342.734 281.252 342.46 cv
282.509 342.223 283.911 341.833 284.505 340.701 cv
284.871 340.004 284.839 339.174 284.813 338.389 cv
284.75 336.314 284.684 334.172 285.048 332.124 cv
285.435 329.939 285.824 327.754 286.211 325.569 cv
286.549 323.657 286.889 321.742 287.034 319.807 cv
287.296 316.307 286.916 312.793 286.293 309.35 cv
285.966 307.542 286.486 304.128 283.901 303.824 cv
281.563 303.55 280.251 306.416 279.618 307.086 cv
cp
.137255 .0941176 .411765 rgb
f
274.821 337.253 mo
274.097 334.217 li
274.387 335.218 274.624 336.232 274.821 337.253 cv
cp
.431373 .298039 .701961 rgb
f
276.587 338.779 mo
277.31 337.726 279.163 337.735 279.789 337.994 cv
280.282 338.199 283.777 336.078 284.799 335.269 cv
284.723 335.33 284.884 336.186 284.895 336.314 cv
284.926 336.673 284.957 337.033 284.984 337.393 cv
285.041 338.102 285.091 338.813 285.135 339.523 cv
285.219 340.914 285.302 342.305 285.302 343.698 cv
285.303 353.775 283.466 362.558 283.278 363.573 cv
283.183 364.081 283.078 364.614 282.749 365.013 cv
282.281 365.578 280.945 366.149 279.008 365.854 cv
277.776 365.666 276.737 364.844 276.329 363.65 cv
275.971 362.604 276.035 361.468 276.104 360.364 cv
276.373 356.01 276.667 351.689 276.566 347.324 cv
276.484 343.816 276.211 340.287 275.463 336.866 cv
276.587 338.779 li
cp
.137255 .0941176 .411765 rgb
f
264.507 316.866 mo
264.275 321.125 264.314 325.4 264.656 329.648 cv
264.863 332.213 265.175 334.767 265.589 337.302 cv
265.796 338.569 266.029 339.832 266.288 341.088 cv
266.537 342.296 266.776 342.678 267.768 343.338 cv
269.896 344.755 273.798 344.675 275.408 342.266 cv
277.141 339.675 276.554 335.553 277.162 332.604 cv
278.044 328.318 280.993 325.233 282.414 321.176 cv
282.924 319.721 283.169 318.298 283.238 316.866 cv
264.507 316.866 li
cp
.227451 .172549 .6 rgb
f
287.688 296.639 mo
287.783 295.881 287.896 295.124 288.029 294.37 cv
288.663 290.758 289.744 287.231 290.199 283.586 cv
290.552 280.756 290.806 277.227 288.561 275.04 cv
288.195 274.683 287.774 274.387 287.33 274.137 cv
282.968 271.673 278.796 274.673 274.706 276.145 cv
272.021 277.114 269.445 278.383 267.039 279.92 cv
266.202 280.455 265.344 280.822 264.78 281.656 cv
264.183 282.538 263.864 283.493 263.802 284.561 cv
263.734 285.773 263.956 286.98 264.158 288.177 cv
265.334 295.146 265.851 302.272 265.012 309.289 cv
264.649 312.31 264.291 320.564 264.291 320.564 cv
265.296 321.001 265.939 321.414 270.813 321.5 cv
280.878 321.68 286.445 319.143 287.025 318.613 cv
287.604 318.083 287.401 316.862 287.421 316.13 cv
287.485 313.94 287.442 311.749 287.391 309.56 cv
287.29 305.253 287.15 300.926 287.688 296.639 cv
cp
.854902 .854902 .976471 rgb
f
266.384 343.102 mo
266.517 345.313 266.636 347.523 266.733 349.736 cv
266.811 351.485 266.875 353.235 266.922 354.985 cv
266.958 356.334 266.983 357.682 266.996 359.03 cv
267.061 366.412 266.239 368.051 269.692 369.097 cv
270.466 369.33 271.292 369.416 272.081 369.242 cv
274.36 368.74 274.802 366.761 275.145 364.3 cv
275.337 362.918 275.451 361.248 275.532 359.847 cv
275.601 358.664 275.656 357.478 275.705 356.293 cv
275.776 354.69 275.834 353.087 275.892 351.482 cv
275.966 349.367 276.039 347.251 276.106 345.135 cv
276.196 342.43 276.498 339.674 276.586 336.969 cv
276.598 336.576 276.36 336.162 276.053 335.947 cv
275.653 335.669 267.428 338.439 266.576 339.341 cv
266.576 339.341 266.22 340.371 266.384 343.102 cv
cp
.227451 .172549 .6 rgb
f
265.863 278.181 mo
263.183 277.783 256.789 276.569 255.383 275.715 cv
251.713 273.483 247.829 268.991 246.203 266.807 cv
245.655 266.07 241.122 268.983 241.107 269.638 cv
241.095 270.176 244.63 275.677 245.182 276.485 cv
248.002 280.615 250.719 282.864 251.66 283.381 cv
254.148 284.746 264.037 288.831 264.652 288.968 cv
266.43 289.364 269.566 287.625 270.278 286.371 cv
274.838 278.351 266.945 278.342 265.863 278.181 cv
cp
.956863 .956863 .980392 rgb
f
273.615 272.594 mo
273.458 271.512 272.641 271.764 273.054 270.783 cv
273.404 269.952 273.937 269.186 274.651 268.633 cv
275.365 268.081 276.268 267.754 277.169 267.804 cv
277.479 267.822 277.687 267.999 277.995 268 cv
278.846 268.003 279.701 267.84 280.55 267.963 cv
281.395 268.086 282.176 268.148 282.176 269.102 cv
282.175 270.373 282.117 271.596 282.524 272.845 cv
282.741 273.513 283.07 274.158 283.129 274.857 cv
283.243 276.233 282.238 277.516 280.995 278.117 cv
279.467 278.856 277.739 278.788 276.114 278.552 cv
275.298 278.434 274.149 278.272 273.671 277.494 cv
273.311 276.909 273.465 276.14 273.542 275.499 cv
273.659 274.528 273.758 273.569 273.615 272.594 cv
cp
.976471 .835294 .764706 rgb
f
275.449 256.348 mo
278.99 258.407 li
278.739 258.261 278.394 258.28 278.013 258.501 cv
274.47 256.442 li
274.85 256.221 275.197 256.203 275.449 256.348 cv
cp
.227451 .172549 .6 rgb
f
gsave
275.449 256.348 mo
278.99 258.407 li
278.739 258.261 278.394 258.28 278.013 258.501 cv
274.47 256.442 li
274.85 256.221 275.197 256.203 275.449 256.348 cv
clp
278.013 258.501 mo
274.47 256.442 li
274.85 256.221 275.197 256.203 275.449 256.348 cv
278.99 258.407 li
278.739 258.261 278.394 258.28 278.013 258.501 cv
cp
.498039 .537255 .65098 rgb
f
grestore
269.966 258.776 mo
269.453 259.402 269.05 260.105 268.928 260.929 cv
268.654 262.767 269.393 264.656 268.994 266.479 cv
268.608 268.246 269.365 272.257 272.849 273.285 cv
274.611 273.805 278.089 273.196 279.208 272.66 cv
280.709 271.941 281.7 270.486 282.589 269.077 cv
289.865 257.524 274.901 252.771 269.966 258.776 cv
cp
.976471 .835294 .764706 rgb
f
285.904 263.898 mo
285.857 264.239 285.809 264.583 285.744 264.921 cv
285.694 265.178 285.634 265.432 285.554 265.681 cv
285.486 265.897 285.405 266.106 285.311 266.309 cv
284.966 267.083 284.473 267.791 283.984 268.487 cv
283.309 269.45 282.585 270.451 281.523 270.962 cv
281.065 271.184 280.564 271.301 280.067 271.41 cv
278.693 271.715 276.66 271.779 275.603 270.638 cv
275.132 270.132 274.942 269.414 274.856 268.742 cv
274.773 268.08 274.751 267.516 274.571 266.85 cv
274.528 266.687 274.484 266.525 274.434 266.363 cv
274.354 266.104 274.262 265.848 274.128 265.613 cv
273.91 265.232 273.579 264.895 273.158 264.768 cv
272.438 264.549 271.573 264.957 270.947 264.541 cv
270.624 264.325 270.46 263.946 270.315 263.589 cv
270.169 263.234 270.039 262.839 269.894 262.45 cv
269.701 261.936 269.479 261.43 269.161 261.026 cv
268.991 260.813 268.793 260.618 268.659 260.38 cv
268.474 260.055 268.261 259.752 268.247 259.382 cv
268.177 257.689 269.571 256.017 270.739 254.939 cv
271.368 254.36 272.064 253.838 272.849 253.499 cv
273.539 253.203 274.284 253.056 275.024 252.951 cv
277.224 252.634 279.579 252.686 281.52 253.766 cv
282.033 254.051 282.527 254.426 282.776 254.96 cv
282.831 255.078 282.874 255.206 282.959 255.308 cv
283.071 255.441 283.243 255.511 283.403 255.586 cv
283.931 255.832 284.364 256.143 284.716 256.506 cv
286.497 258.338 286.241 261.462 285.904 263.898 cv
cp
.227451 .172549 .6 rgb
f
273.947 263.978 mo
275.341 263.86 275.726 265.587 274.79 266.943 cv
274.516 267.339 274.028 267.695 273.667 268.012 cv
271.201 270.186 270.534 267.89 271.315 267.152 cv
273.133 265.434 272.191 264.126 273.947 263.978 cv
cp
.976471 .835294 .764706 rgb
f
273.569 266.619 mo
273.727 266.47 275.304 265.503 274.208 264.881 cv
273.904 264.709 273.575 264.977 273.535 265.297 cv
273.513 265.462 273.568 265.63 273.545 265.795 cv
273.533 265.893 273.493 265.986 273.443 266.071 cv
273.306 266.303 272.827 266.532 272.927 266.868 cv
273.017 267.164 273.479 266.705 273.569 266.619 cv
cp
1 .74902 .635294 rgb
f
266.131 236.749 mo
265.983 236.624 265.856 236.465 265.875 236.287 cv
265.903 236.03 266.258 235.912 266.474 235.881 cv
266.835 235.828 267.209 235.925 267.542 236.063 cv
267.98 236.247 268.388 236.508 268.84 236.65 cv
268.966 236.689 269.101 236.719 269.229 236.687 cv
269.357 236.655 269.473 236.543 269.468 236.41 cv
269.461 236.168 269.064 235.966 268.895 235.841 cv
268.623 235.639 268.336 235.457 268.036 235.297 cv
267.582 235.055 267.01 234.761 266.492 234.694 cv
265.923 234.619 265.304 234.731 264.72 234.677 cv
264.605 234.667 264.484 234.653 264.38 234.602 cv
264.211 234.521 264.101 234.357 264.007 234.196 cv
263.906 234.021 263.814 233.84 263.732 233.656 cv
263.71 233.547 li
263.794 233.451 li
264.445 233.015 265.275 232.781 266.006 232.511 cv
266.532 232.319 267.06 232.134 267.593 231.958 cv
267.72 231.916 267.851 231.874 267.983 231.89 cv
268.121 231.907 268.243 231.984 268.365 232.05 cv
268.734 232.254 269.141 232.377 269.533 232.534 cv
270.895 233.084 272.043 234.056 273.137 235.037 cv
273.867 235.693 274.617 236.348 275.32 237.027 cv
275.887 237.577 275.541 238.647 275.029 239.112 cv
274.916 239.216 274.791 239.307 274.657 239.381 cv
274.143 239.668 273.553 239.651 272.997 239.506 cv
272.718 239.432 271.443 238.958 271.05 238.847 cv
269.432 238.391 267.823 237.828 266.391 236.934 cv
266.131 236.749 li
cp
.976471 .835294 .764706 rgb
f
296.911 240.163 mo
301.099 237.436 302.72 233.039 301.195 231.585 cv
298.583 229.095 296.311 230.759 290.359 235.958 cv
290.228 236.072 290.096 236.186 289.964 236.3 cv
288.504 237.55 287.05 238.81 285.706 240.187 cv
284.952 240.959 284.226 241.767 283.588 242.641 cv
283.443 242.843 283.299 243.047 283.166 243.257 cv
283.029 243.475 282.995 243.732 282.918 243.977 cv
282.723 244.601 282.553 245.241 282.539 245.898 cv
282.521 246.712 282.777 247.571 283.396 248.1 cv
284.103 248.705 285.158 248.763 286.041 248.468 cv
287.036 248.136 290.597 247.448 293.222 244.898 cv
294.936 243.233 291.503 243.684 296.911 240.163 cv
cp
.827451 .827451 .960784 rgb
f
273.87 237.07 mo
274.123 236.699 274.361 236.452 274.805 236.552 cv
275.248 236.652 275.675 236.84 276.075 237.051 cv
276.916 237.493 277.665 238.08 278.439 238.623 cv
279.458 239.339 280.497 239.92 281.566 240.554 cv
282.336 241.012 283.088 241.497 283.811 242.024 cv
285.156 243.003 288.13 245.248 286.716 247.219 cv
286.206 247.93 285.015 248.615 284.084 248.491 cv
283.377 248.396 282.533 247.556 281.985 247.159 cv
280.712 246.237 279.468 245.274 278.225 244.312 cv
276.707 243.138 275.262 241.791 273.726 240.61 cv
273.105 240.132 272.677 240.078 272.886 239.175 cv
273.051 238.466 273.415 237.786 273.802 237.174 cv
273.87 237.07 li
cp
f
315.51 234.176 mo
315.513 233.338 315.572 232.497 315.598 231.658 cv
315.652 229.916 315.64 228.162 315.336 226.441 cv
314.974 224.386 314.197 222.405 313.067 220.651 cv
312.896 220.386 312.715 220.124 312.483 219.911 cv
311.899 219.995 311.159 219.803 310.635 220.082 cv
309.857 220.496 309.304 221.853 308.966 222.614 cv
308.054 224.672 307.772 227.016 308.232 229.224 cv
308.41 230.075 308.791 230.726 309.081 231.517 cv
309.433 232.476 309.757 233.428 310.318 234.292 cv
311.011 235.358 312.052 236.261 313.301 236.503 cv
313.927 236.624 314.649 236.544 315.082 236.075 cv
315.555 235.562 315.508 234.859 315.51 234.216 cv
315.51 234.176 li
cp
.188235 .145098 .203922 rgb
f
315.1 233.773 mo
313.2 232.909 309.722 231.207 307.848 229.925 cv
307.574 229.738 306.314 230.564 305.989 230.495 cv
303.562 229.981 300.978 230.096 298.727 231.087 cv
298.652 231.123 li
298.652 246.022 li
312.931 246.022 li
315.1 233.773 li
cp
1 .74902 .635294 rgb
f
309.72 232.635 mo
309.72 232.635 300.833 237.102 301.261 232.168 cv
301.856 225.292 302.294 224.525 305.376 223.638 cv
306.22 223.394 306.552 222.682 307.427 222.717 cv
310.617 222.845 309.279 224.51 309.087 225.717 cv
308.515 229.295 309.776 230.74 309.72 232.635 cv
cp
f
301.694 229.972 mo
301.574 229.977 li
301.928 229.869 302.131 229.961 301.694 229.972 cv
cp
.890196 .886275 .94902 rgb
f
319.672 238.901 mo
319.69 239.174 319.692 239.459 319.68 239.756 cv
319.646 240.581 319.429 241.376 319.248 242.175 cv
319.034 243.121 318.58 243.974 318.07 244.791 cv
317.532 245.656 317.091 246.537 316.556 247.406 cv
316.015 248.286 315.735 249.177 315.308 250.11 cv
314.353 252.197 313.498 254.358 313.117 256.632 cv
312.811 258.461 312.811 260.311 312.913 262.15 cv
312.97 263.025 313.117 263.921 313.071 264.784 cv
313.06 265.023 313.117 265.455 313.071 265.659 cv
313.003 265.977 312.844 266.09 312.549 266.317 cv
310.96 267.554 309.075 268.27 307.123 268.61 cv
305.021 268.962 302.751 268.815 300.73 268.474 cv
300.129 268.372 299.561 268.258 299.016 268.134 cv
296.608 267.566 294.804 266.839 294.496 266.612 cv
294.054 266.272 294.247 266.373 294.622 263.16 cv
296.166 249.968 290.342 249.73 292.612 242.826 cv
292.997 241.645 293.793 240.533 294.281 239.352 cv
296.086 235.026 294.951 230.213 301.57 229.973 cv
301.162 230.099 297.33 236.553 301.942 238.446 cv
304.916 239.666 310.804 236.412 312.178 232.37 cv
314.138 233.287 315.918 233.869 317.551 235.075 cv
318.945 236.103 319.569 237.321 319.672 238.901 cv
cp
.956863 .956863 .980392 rgb
f
307.486 326.908 mo
307.258 327.267 307.11 327.679 306.967 328.082 cv
306.45 329.542 305.932 331.002 305.415 332.462 cv
304.957 333.752 304.807 335.133 304.644 336.498 cv
304.516 337.566 304.122 338.883 304.871 339.771 cv
305.616 340.655 306.966 340.868 308.049 340.464 cv
309.132 340.061 309.959 339.141 310.491 338.115 cv
311.134 336.873 311.267 335.591 311.471 334.233 cv
311.695 332.747 311.919 331.263 312.143 329.778 cv
312.234 329.172 312.325 328.548 312.182 327.953 cv
311.796 326.35 308.993 325.273 307.779 326.532 cv
307.668 326.648 307.571 326.774 307.486 326.908 cv
cp
.0980392 .0705882 .105882 rgb
f
295.495 329.875 mo
295.479 329.108 295.83 328.373 296.274 327.745 cv
296.983 326.742 297.926 325.94 298.7 324.992 cv
299.077 324.53 299.312 324.042 299.599 323.536 cv
299.909 322.991 300.494 322.52 300.902 322.037 cv
301.102 321.815 li
301.79 321.071 302.702 320.486 303.691 320.24 cv
304.516 320.036 305.843 319.978 306.424 320.691 cv
307.261 321.719 307.106 322.843 306.781 324.016 cv
306.448 325.213 305.393 325.591 304.559 326.423 cv
304.133 326.849 303.832 327.333 303.397 327.762 cv
302.833 328.318 302.315 328.918 301.764 329.487 cv
301.012 330.265 300.182 330.998 299.187 331.424 cv
297.757 332.036 295.582 331.909 295.497 329.93 cv
295.495 329.875 li
cp
f
292.148 299.091 mo
292.915 300.878 298.338 314.236 299.556 318.606 cv
300.096 320.543 300.656 323.083 299.285 324.805 cv
298.98 325.187 298.636 325.553 298.45 326.005 cv
298.263 326.456 298.274 327.034 298.625 327.374 cv
298.941 327.681 299.449 327.71 299.864 327.561 cv
300.279 327.413 300.621 327.118 300.953 326.829 cv
301.983 325.932 303.013 325.027 303.888 323.98 cv
304.383 323.386 304.827 322.746 305.179 322.055 cv
305.538 321.35 305.859 320.777 305.496 320.054 cv
304.723 318.51 304.395 316.718 304.262 315.011 cv
304.178 313.931 304.178 312.846 304.213 311.764 cv
304.246 310.769 304.393 309.75 304.331 308.76 cv
304.204 306.737 304.123 304.689 303.582 302.724 cv
303.225 301.428 302.645 300.171 301.797 299.122 cv
300.924 298.043 299.72 297.384 298.756 296.41 cv
298.182 295.83 297.432 295.243 296.569 295.388 cv
292.148 299.091 li
cp
1 .74902 .635294 rgb
f
315.848 276.303 mo
315.805 273.762 315.742 272.338 315.39 269.819 cv
315.164 268.201 313.879 263.779 313.879 263.779 cv
313.879 263.779 307.279 266.612 305.195 266.818 cv
302.658 267.068 301.645 267.133 299.653 266.753 cv
298.747 266.579 298.676 266.624 298.684 267.527 cv
298.695 268.784 299.189 270.208 299.431 271.444 cv
300.374 276.248 301.813 281.047 302.563 285.878 cv
303.174 289.811 303 293.993 303.541 297.992 cv
303.77 299.689 304.682 301.395 305.45 302.853 cv
306.344 304.55 307.244 305.497 308.898 305.313 cv
309.648 305.23 310.941 304.378 311.355 303.743 cv
311.621 303.335 311.679 302.53 311.831 302.05 cv
312.27 300.666 312.641 299.259 312.946 297.839 cv
313.009 297.543 313.066 297.245 313.126 296.96 cv
313.143 296.859 li
313.891 293.078 314.312 289.202 314.88 285.394 cv
315.323 282.42 315.899 279.366 315.848 276.303 cv
cp
.976471 .835294 .764706 rgb
f
303.037 295.365 mo
303.386 300.054 305.287 303.451 306.075 308.08 cv
306.943 313.178 307.044 318.362 307.084 323.52 cv
307.1 325.72 307.252 328.076 306.886 330.247 cv
306.659 331.599 305.455 333.852 306.537 335.064 cv
306.926 335.499 307.507 335.731 308.088 335.778 cv
308.589 335.819 309.114 335.725 309.527 335.438 cv
310.247 334.938 310.386 333.648 310.646 332.858 cv
311.556 330.086 312.06 327.242 312.827 324.436 cv
313.673 321.344 314.977 318.375 315.449 315.186 cv
315.72 313.352 315.69 311.487 315.66 309.633 cv
315.6 305.977 314.356 300.96 312.866 297.637 cv
312.507 296.835 312.403 297.791 311.538 297.634 cv
303.037 295.365 li
cp
f
290.652 295.345 mo
290.311 297.025 290.185 298.573 291.446 300.297 cv
292.905 302.293 295.379 303.347 297.836 303.632 cv
300.292 303.916 302.77 303.522 305.211 303.13 cv
307.982 302.684 310.754 302.238 313.525 301.792 cv
314.165 301.689 314.863 301.555 315.28 301.058 cv
315.731 300.519 315.702 299.739 315.649 299.038 cv
315.394 295.677 315.154 292.428 315.323 289.095 cv
315.515 285.301 316.148 281.449 316.148 277.655 cv
316.328 274.074 316.142 270.367 314.856 266.982 cv
314.567 266.222 314.157 263.974 313.363 263.641 cv
312.131 263.123 309.767 264.747 308.619 265.144 cv
307.053 265.684 301.453 266.727 300.175 266.793 cv
297.666 266.922 297.187 264.827 294.037 264.851 cv
293.161 264.857 292.629 271.084 292.499 271.923 cv
292.168 274.06 291.895 276.208 291.747 278.366 cv
291.611 280.359 291.897 282.203 291.866 284.17 cv
291.82 287.156 291.61 290.239 291.1 293.183 cv
290.968 293.94 290.792 294.653 290.652 295.345 cv
cp
.227451 .172549 .6 rgb
f
294.035 264.851 mo
294.363 263.731 294.672 262.713 294.672 262.713 cv
294.672 262.713 298.717 266.291 304.143 265.893 cv
309.342 265.511 313.067 262.513 312.919 262.235 cv
313.254 262.739 313.572 263.255 313.879 263.779 cv
308.256 268.657 299.971 268.522 294.035 264.851 cv
cp
.137255 .0941176 .411765 rgb
f
306.422 228.366 mo
306.666 228.208 306.904 228.036 307.133 227.845 cv
307.239 227.756 307.342 227.664 307.443 227.569 cv
308.321 226.742 308.857 225.613 309.526 224.626 cv
310.202 223.631 310.574 222.324 310.746 221.145 cv
311.097 218.744 310.48 216.235 308.78 214.457 cv
306.874 212.463 303.838 211.631 301.181 212.373 cv
300.461 212.575 299.775 212.879 299.11 213.218 cv
298.536 213.512 297.964 213.838 297.525 214.311 cv
297.238 214.622 297.015 214.987 296.81 215.359 cv
296.445 216.026 296.252 216.685 296.044 217.411 cv
295.93 217.811 295.969 218.235 295.969 218.646 cv
295.969 219.376 296.02 220.081 296.162 220.799 cv
296.279 221.389 296.36 221.984 296.374 222.583 cv
296.388 223.19 296.09 223.708 295.898 224.271 cv
295.78 224.617 295.576 225.156 295.68 225.503 cv
295.793 225.883 296.203 226.187 296.393 226.533 cv
296.598 226.904 296.66 227.18 296.676 227.611 cv
296.687 227.888 296.781 228.067 296.888 228.312 cv
296.979 228.518 296.929 228.669 296.96 228.876 cv
296.997 229.12 297.186 229.333 297.274 229.56 cv
297.373 229.816 297.456 230.066 297.59 230.309 cv
298.381 231.739 299.534 231.833 300.961 231.279 cv
302.079 230.846 303.103 230.285 304.124 229.672 cv
304.887 229.212 305.683 228.847 306.422 228.366 cv
cp
.976471 .835294 .764706 rgb
f
313.325 218.695 mo
313.286 218.032 313.165 217.373 312.962 216.739 cv
312.766 216.127 312.494 215.54 312.156 214.993 cv
311.983 214.713 311.798 214.422 311.578 214.177 cv
311.378 213.953 310.953 213.719 310.844 213.446 cv
310.83 213.411 309.689 210.583 304.431 210.584 cv
302.45 210.585 300.511 211.306 298.835 212.344 cv
297.646 213.079 296.917 213.736 296.349 215.04 cv
295.786 216.329 295.506 217.74 295.546 219.146 cv
295.553 219.358 295.574 219.59 295.72 219.744 cv
295.939 219.976 296.316 219.921 296.625 219.841 cv
297.79 219.542 298.761 219.157 299.789 218.569 cv
300.265 218.296 301.526 217.712 302.085 217.967 cv
302.547 218.177 302.202 219.371 302.376 219.902 cv
302.596 220.575 303.024 221.182 303.607 221.586 cv
304.126 221.946 304.737 222.148 305.293 222.449 cv
305.847 222.751 306.377 223.199 306.529 223.812 cv
306.689 224.464 306.469 225.336 307.047 225.677 cv
307.735 226.085 309.628 224.508 309.53 224.673 cv
309.074 225.446 309.138 225.312 308.971 226.676 cv
311.151 225.381 312.823 223.047 313.233 220.514 cv
313.33 219.914 313.362 219.302 313.325 218.695 cv
cp
.243137 .207843 .266667 rgb
f
308.839 222.081 mo
310.221 221.993 310.564 223.71 309.61 225.031 cv
309.332 225.417 308.841 225.758 308.477 226.064 cv
305.993 228.163 305.381 225.879 306.17 225.164 cv
308.005 223.504 307.1 222.191 308.839 222.081 cv
cp
.976471 .835294 .764706 rgb
f
307.943 225.22 mo
308.102 225.075 309.681 224.152 308.61 223.515 cv
308.315 223.338 307.983 223.597 307.935 223.91 cv
307.911 224.074 307.961 224.241 307.937 224.404 cv
307.921 224.5 307.881 224.591 307.83 224.674 cv
307.688 224.901 307.211 225.119 307.303 225.452 cv
307.385 225.748 307.851 225.303 307.943 225.22 cv
cp
1 .74902 .635294 rgb
f
315.863 258.389 mo
315.725 258.529 315.574 258.656 315.378 258.747 cv
315.087 258.882 314.748 258.925 314.444 258.824 cv
314.053 258.694 313.775 258.355 313.51 258.04 cv
313.081 257.53 312.627 257.04 312.151 256.573 cv
312.027 256.451 311.878 256.323 311.704 256.338 cv
311.548 256.352 311.423 256.489 311.379 256.639 cv
311.35 256.74 311.435 257.233 311.372 257.247 cv
311.243 257.279 310.94 257.096 310.814 257.054 cv
310.594 256.981 310.371 256.916 310.146 256.858 cv
309.684 256.739 309.214 256.651 308.739 256.594 cv
307.804 256.484 306.855 256.496 305.923 256.636 cv
305.685 256.707 li
305.572 256.916 li
305.586 257.006 305.671 257.066 305.752 257.111 cv
306.372 257.456 307.096 257.511 307.774 257.676 cv
308.066 257.747 308.318 257.893 308.608 257.978 cv
308.982 258.086 309.348 258.226 309.699 258.394 cv
308.555 258.133 307.384 257.993 306.21 257.975 cv
305.969 257.971 305.404 257.988 305.257 258.218 cv
305.058 258.531 305.575 258.734 305.783 258.81 cv
306.42 259.039 307.056 259.268 307.692 259.497 cv
306.993 259.246 306.211 259.178 305.476 259.257 cv
305.115 259.296 304.854 259.303 304.95 259.735 cv
305.013 260.021 305.24 260.263 305.533 260.313 cv
305.976 260.39 306.414 260.452 306.856 260.549 cv
307.47 260.682 308.079 260.853 308.655 261.108 cv
308.16 261.143 307.659 261.179 307.188 261.334 cv
306.801 261.461 306.346 261.699 306.126 262.06 cv
305.981 262.299 305.951 262.774 306.318 262.805 cv
306.708 262.837 307.102 262.844 307.493 262.827 cv
308.318 262.79 309.148 262.67 309.971 262.791 cv
311.165 262.968 312.243 263.647 313.441 263.804 cv
314.52 263.946 315.602 263.647 316.565 263.173 cv
317.463 262.731 318.124 261.948 318.968 261.421 cv
319.48 261.102 320.034 260.924 320.456 260.49 cv
320.926 260.007 321.378 259.508 321.813 258.993 cv
322.021 258.745 322.235 258.471 322.255 258.147 cv
322.284 257.698 321.933 257.318 321.566 257.057 cv
321.079 256.71 320.517 256.471 319.931 256.35 cv
319.383 256.237 318.772 256.123 318.246 256.37 cv
317.556 256.696 316.949 257.387 316.368 257.876 cv
316.179 258.035 316.03 258.221 315.863 258.389 cv
cp
.976471 .835294 .764706 rgb
f
317.836 235.16 mo
317.704 235.062 317.572 234.959 317.441 234.853 cv
317.016 234.506 316.447 234.225 315.931 234.413 cv
315.529 234.559 315.273 234.95 315.094 235.338 cv
314.628 236.353 314.505 237.489 314.427 238.602 cv
314.347 239.735 314.309 240.881 314.502 242.001 cv
314.675 243.003 315.069 244.348 315.917 244.99 cv
316.733 245.608 317.517 246.284 318.311 246.943 cv
319.911 248.272 321.536 249.571 323.19 250.832 cv
323.956 251.416 324.808 252.256 325.713 252.624 cv
328.277 253.666 330.779 252.321 331.224 250.415 cv
331.392 249.693 331.106 248.899 330.792 248.258 cv
330.334 247.323 329.548 246.614 328.87 245.852 cv
328.08 244.963 327.278 244.082 326.469 243.21 cv
324.324 240.898 322.147 238.551 319.716 236.534 cv
319.109 236.03 318.461 235.626 317.836 235.16 cv
cp
.956863 .956863 .980392 rgb
f
318.307 261.792 mo
319.454 262.114 320.254 261.245 321.007 260.653 cv
322.772 259.268 329.392 254.73 331.119 250.757 cv
331.535 249.801 329.154 248.892 328.046 247.925 cv
327.288 247.264 325.988 247.611 325.147 247.882 cv
324.101 248.218 315.926 257.693 315.776 258.22 cv
315.453 259.351 317.419 261.542 318.307 261.792 cv
cp
f
gsave
226.05 106.547 mo
226.021 96.5234 li
274.55 68.5039 li
275.914 67.7174 277.204 67.3446 278.347 67.3446 cv
281.12 67.3446 283.03 69.5388 283.039 73.3422 cv
283.04 73.9008 li
282.416 74.0923 281.764 74.3786 281.095 74.7645 cv
226.05 106.547 li
clp
226.021 67.3446 mo
283.04 67.3446 li
283.04 106.547 li
226.021 106.547 li
cp
.949804 .94902 .985882 rgb
f
grestore
224.861 107.233 mo
224.833 97.2096 li
226.021 96.5234 li
226.05 106.547 li
224.861 107.233 li
.74902 .745098 .929412 rgb
f
224.67 107.343 mo
224.641 97.3206 li
224.833 97.2096 li
224.861 107.233 li
224.67 107.343 li
.913725 .913725 .968627 rgb
f
149.311 258.304 mo
146.54 258.304 144.632 256.11 144.624 252.308 cv
144.366 162.204 li
144.342 153.421 li
144.329 148.05 148.102 141.509 152.775 138.814 cv
224.641 97.3206 li
224.67 107.343 li
159.321 145.075 li
154.647 147.769 150.875 154.31 150.887 159.682 cv
150.911 168.464 li
151.167 258.006 li
150.517 258.206 149.895 258.304 149.311 258.304 cv
.333333 .286274 .666667 rgb
f
226.385 224.877 mo
226.357 214.854 li
274.887 186.837 li
279.56 184.136 283.339 177.601 283.32 172.229 cv
283.063 82.1312 li
283.04 73.9008 li
283.689 73.7019 284.31 73.6051 284.892 73.6051 cv
287.665 73.6051 289.575 75.7995 289.584 79.6029 cv
289.608 88.3918 li
289.865 178.49 li
289.884 183.862 286.105 190.396 281.432 193.097 cv
226.385 224.877 li
.949804 .94902 .985882 rgb
f
225.197 225.564 mo
225.168 215.541 li
226.357 214.854 li
226.385 224.877 li
225.197 225.564 li
.74902 .745098 .929412 rgb
f
225.019 225.666 mo
224.99 215.644 li
225.168 215.541 li
225.197 225.564 li
225.019 225.666 li
.913725 .913725 .968627 rgb
f
155.856 264.564 mo
153.085 264.564 151.177 262.371 151.169 258.569 cv
151.167 258.006 li
151.792 257.814 152.443 257.527 153.112 257.14 cv
224.99 215.644 li
225.019 225.666 li
159.657 263.401 li
158.292 264.19 157 264.564 155.856 264.564 cv
.333333 .286274 .666667 rgb
f
226.357 214.854 mo
226.05 106.547 li
281.095 74.7645 li
281.764 74.3786 282.416 74.0923 283.04 73.9008 cv
283.063 82.1312 li
283.32 172.229 li
283.339 177.601 279.56 184.136 274.887 186.837 cv
226.357 214.854 li
.90945 .908035 .974533 rgb
f
225.168 215.541 mo
224.861 107.233 li
226.05 106.547 li
226.357 214.854 li
225.168 215.541 li
.74902 .745098 .929412 rgb
f
224.99 215.644 mo
224.67 107.343 li
224.861 107.233 li
225.168 215.541 li
224.99 215.644 li
.882353 .878431 .960784 rgb
f
151.167 258.006 mo
150.911 168.464 li
150.887 159.682 li
150.875 154.31 154.647 147.769 159.321 145.075 cv
224.67 107.343 li
224.99 215.644 li
153.112 257.14 li
152.443 257.527 151.792 257.814 151.167 258.006 cv
.415686 .376471 .717647 rgb
f
293.328 79.0459 mo
295.455 80.282 li
293.939 79.4008 291.839 79.5248 289.521 80.8629 cv
287.395 79.6267 li
289.712 78.2886 291.812 78.1647 293.328 79.0459 cv
cp
.956863 .956863 .980392 rgb
f
gsave
293.328 79.0459 mo
295.455 80.282 li
293.939 79.4009 291.839 79.5248 289.521 80.8629 cv
287.395 79.6267 li
289.712 78.2886 291.812 78.1646 293.328 79.0459 cv
clp
289.521 80.8629 mo
287.395 79.6267 li
289.712 78.2886 291.812 78.1647 293.328 79.0459 cv
295.455 80.282 li
293.939 79.4008 291.839 79.5248 289.521 80.8629 cv
cp
.996078 .529412 .52549 rgb
f
grestore
163.908 267.346 mo
161.781 266.109 li
160.285 265.24 159.357 263.392 159.35 260.764 cv
161.477 262 li
161.484 264.628 162.412 266.476 163.908 267.346 cv
cp
.74902 .745098 .929412 rgb
f
gsave
163.908 267.346 mo
161.781 266.109 li
160.285 265.24 159.357 263.392 159.35 260.764 cv
161.477 262 li
161.484 264.628 162.412 266.476 163.908 267.346 cv
clp
163.908 267.346 mo
161.781 266.109 li
160.285 265.24 159.357 263.392 159.35 260.764 cv
161.477 262 li
161.484 264.628 162.412 266.476 163.908 267.346 cv
cp
f
grestore
161.2 164.547 mo
159.074 163.311 li
159.098 171.974 li
161.225 173.202 li
161.2 164.547 li
cp
1 .4 .380392 rgb
f
159.098 171.974 mo
159.35 260.764 li
161.477 262 li
161.225 173.202 li
159.098 171.974 li
cp
.74902 .745098 .929412 rgb
f
169.513 150.15 mo
167.386 148.914 li
287.395 79.6267 li
289.521 80.8629 li
169.513 150.15 li
cp
.996078 .529412 .52549 rgb
f
161.2 164.547 mo
159.074 163.311 li
159.059 158.019 162.781 151.573 167.386 148.914 cv
169.513 150.15 li
164.907 152.809 161.186 159.256 161.2 164.547 cv
cp
.956863 .956863 .980392 rgb
f
gsave
161.2 164.547 mo
159.074 163.311 li
159.058 158.02 162.781 151.573 167.386 148.914 cv
169.513 150.15 li
164.907 152.809 161.186 159.256 161.2 164.547 cv
clp
161.2 164.547 mo
159.074 163.311 li
159.059 158.019 162.781 151.573 167.386 148.914 cv
169.513 150.15 li
164.907 152.809 161.186 159.256 161.2 164.547 cv
cp
1 .4 .380392 rgb
f
grestore
298.163 183.083 mo
298.181 188.376 294.457 194.816 289.852 197.478 cv
169.843 266.762 li
165.238 269.424 161.49 267.293 161.478 262 cv
161.225 173.202 li
161.2 164.547 li
161.189 159.253 164.906 152.807 169.512 150.152 cv
289.52 80.8615 li
294.125 78.2059 297.873 80.3366 297.885 85.6296 cv
297.91 94.2911 li
298.163 183.083 li
cp
.952941 .94902 .988235 rgb
f
297.91 94.2911 mo
161.225 173.202 li
161.2 164.547 li
161.189 159.253 164.906 152.807 169.512 150.152 cv
289.52 80.8615 li
294.125 78.2059 297.873 80.3366 297.885 85.6296 cv
297.91 94.2911 li
cp
.996078 .262745 .25098 rgb
f
250.398 149.117 mo
250.398 137.349 242.211 132.536 232.114 138.366 cv
222.016 144.196 213.831 158.461 213.831 170.228 cv
213.831 181.995 222.017 186.808 232.115 180.978 cv
242.212 175.148 250.398 160.884 250.398 149.117 cv
cp
.227451 .172549 .6 rgb
f
237.781 144.635 mo
237.781 148.282 235.244 152.703 232.114 154.51 cv
228.984 156.318 226.447 154.826 226.447 151.178 cv
226.447 147.531 228.984 143.109 232.114 141.302 cv
235.244 139.496 237.781 140.987 237.781 144.635 cv
cp
1 1 1 rgb
f
240.984 170.004 mo
240.984 159.104 li
240.985 154.34 237.64 152.373 233.551 154.734 cv
230.677 156.393 li
226.589 158.753 223.244 164.582 223.244 169.347 cv
223.244 180.246 li
240.984 170.004 li
cp
f
233.315 154.87 mo
230.913 156.257 li
233.315 154.87 li
cp
.74902 .745098 .929412 rgb
f
260.628 178.829 mo
203.601 211.752 li
203.601 202.154 li
260.628 169.231 li
260.628 178.829 li
cp
1 1 1 rgb
f
243.019 209.784 mo
221.766 222.054 li
221.766 228.212 li
243.019 215.942 li
243.019 209.784 li
cp
.227451 .172549 .6 rgb
f
260.628 193.7 mo
203.602 226.624 li
203.602 217.026 li
260.628 184.102 li
260.628 193.7 li
cp
1 1 1 rgb
f
207.886 219.547 mo
206.849 219.789 li
207.007 219.1 li
208.044 218.945 li
208.013 217.6 li
208.538 217.297 li
208.504 218.699 li
209.524 217.675 li
209.681 218.185 li
208.628 219.154 li
209.307 219.836 li
208.882 220.455 li
208.243 219.681 li
207.625 221.152 li
207.196 221.039 li
207.886 219.547 li
cp
.94902 .168627 .219608 rgb
f
210.914 217.799 mo
209.877 218.041 li
210.035 217.352 li
211.072 217.197 li
211.041 215.852 li
211.566 215.549 li
211.532 216.951 li
212.551 215.927 li
212.709 216.437 li
211.655 217.406 li
212.335 218.088 li
211.909 218.706 li
211.271 217.933 li
210.653 219.404 li
210.224 219.291 li
210.914 217.799 li
cp
f
213.942 216.05 mo
212.905 216.292 li
213.063 215.604 li
214.099 215.449 li
214.068 214.104 li
214.594 213.801 li
214.56 215.203 li
215.579 214.178 li
215.737 214.689 li
214.683 215.658 li
215.363 216.34 li
214.937 216.958 li
214.299 216.185 li
213.681 217.656 li
213.252 217.543 li
213.942 216.05 li
cp
f
216.969 214.302 mo
215.933 214.545 li
216.091 213.856 li
217.127 213.701 li
217.096 212.356 li
217.622 212.053 li
217.587 213.455 li
218.607 212.43 li
218.765 212.941 li
217.711 213.91 li
218.391 214.592 li
217.965 215.21 li
217.327 214.437 li
216.708 215.908 li
216.279 215.795 li
216.969 214.302 li
cp
f
219.997 212.554 mo
218.961 212.797 li
219.119 212.107 li
220.155 211.953 li
220.124 210.608 li
220.65 210.305 li
220.615 211.707 li
221.635 210.682 li
221.793 211.193 li
220.739 212.162 li
221.418 212.844 li
220.993 213.462 li
220.354 212.689 li
219.736 214.16 li
219.307 214.047 li
219.997 212.554 li
cp
f
284.756 93.0687 mo
284.756 94.2021 285.552 94.6619 286.534 94.0952 cv
287.515 93.528 288.311 92.1498 288.311 91.0164 cv
288.311 89.8828 287.515 89.4231 286.534 89.9898 cv
285.552 90.5569 284.756 91.9351 284.756 93.0687 cv
cp
.956863 .956863 .980392 rgb
f
279.157 96.3015 mo
279.157 97.4346 279.953 97.8943 280.935 97.3272 cv
281.917 96.7605 282.712 95.3823 282.712 94.2488 cv
282.712 93.1152 281.917 92.6559 280.935 93.2222 cv
279.953 93.789 279.157 95.1675 279.157 96.3015 cv
cp
f
273.558 99.5339 mo
273.558 100.667 274.354 101.127 275.336 100.56 cv
276.318 99.9933 277.113 98.6151 277.113 97.4812 cv
277.113 96.3477 276.318 95.8883 275.336 96.455 cv
274.354 97.0218 273.558 98.4 273.558 99.5339 cv
cp
f
123.77 374.67 mo
144.999 386.974 li
142.438 385.486 140.845 382.332 140.832 377.86 cv
119.604 365.555 li
119.616 370.027 121.21 373.181 123.77 374.67 cv
cp
1 .717647 0 rgb
f
gsave
123.77 374.67 mo
144.999 386.974 li
142.438 385.486 140.845 382.332 140.832 377.86 cv
119.604 365.556 li
119.616 370.027 121.21 373.181 123.77 374.67 cv
clp
140.832 377.86 mo
119.604 365.555 li
119.616 370.027 121.21 373.181 123.77 374.67 cv
144.999 386.974 li
142.438 385.486 140.845 382.332 140.832 377.86 cv
cp
f
grestore
213.438 268.665 mo
192.209 256.36 li
189.615 254.852 186.029 255.055 182.086 257.331 cv
203.315 269.635 li
207.257 267.359 210.844 267.157 213.438 268.665 cv
cp
1 .870588 .219608 rgb
f
gsave
213.438 268.665 mo
192.209 256.36 li
189.615 254.853 186.029 255.055 182.086 257.331 cv
203.315 269.635 li
207.257 267.359 210.844 267.157 213.438 268.665 cv
clp
213.438 268.665 mo
192.209 256.36 li
189.657 254.876 186.143 255.048 182.274 257.224 cv
203.502 269.529 li
207.371 267.353 210.885 267.181 213.438 268.665 cv
cp
f
203.502 269.529 mo
182.274 257.224 li
182.086 257.331 li
203.315 269.635 li
203.502 269.529 li
cp
f
grestore
140.674 322.206 mo
119.446 309.901 li
119.604 365.555 li
140.832 377.86 li
140.674 322.206 li
cp
1 .717647 0 rgb
f
203.315 269.635 mo
182.086 257.331 li
133.652 285.294 li
154.881 297.599 li
203.315 269.635 li
cp
1 .870588 .219608 rgb
f
154.881 297.599 mo
133.652 285.294 li
125.815 289.819 119.42 300.895 119.446 309.901 cv
140.674 322.206 li
140.649 313.2 147.043 302.124 154.881 297.599 cv
cp
f
gsave
154.88 297.599 mo
133.652 285.294 li
125.815 289.819 119.42 300.895 119.446 309.901 cv
140.674 322.206 li
140.649 313.2 147.043 302.124 154.88 297.599 cv
clp
154.881 297.599 mo
133.652 285.294 li
131.967 286.267 130.349 287.543 128.847 289.035 cv
150.075 301.34 li
151.577 299.847 153.196 298.572 154.881 297.599 cv
cp
f
150.075 301.34 mo
128.847 289.035 li
123.362 294.486 119.426 302.831 119.446 309.901 cv
140.674 322.206 li
140.654 315.136 144.59 306.79 150.075 301.34 cv
cp
f
grestore
154.881 297.599 mo
147.043 302.124 140.649 313.2 140.674 322.206 cv
140.832 377.86 li
140.857 386.866 147.294 390.526 155.131 386.002 cv
203.565 358.038 li
211.403 353.513 217.791 342.448 217.766 333.443 cv
217.608 277.788 li
217.582 268.782 211.152 265.11 203.315 269.635 cv
154.881 297.599 li
cp
1 .768627 0 rgb
f
188.54 344.518 mo
188.554 340.788 185.941 339.267 182.703 341.119 cv
179.466 342.973 176.831 347.499 176.816 351.228 cv
176.808 353.687 177.943 355.177 179.642 355.383 cv
179.603 366.002 li
185.632 362.55 li
185.672 351.933 li
187.379 349.776 188.531 346.977 188.54 344.518 cv
cp
.14902 .12549 .156863 rgb
f
203.315 234.4 mo
203.203 263.975 li
203.199 265.004 202.524 266.027 201.175 266.809 cv
198.476 268.368 194.116 268.353 191.429 266.772 cv
190.082 265.98 189.414 264.942 189.422 263.91 cv
189.534 234.348 li
189.553 229.19 188.105 225.38 185.559 223.898 cv
183.012 222.415 178.986 223.036 174.507 225.6 cv
166.897 229.954 li
154.973 236.778 144.86 254.149 144.808 267.887 cv
144.697 297.463 li
144.693 298.492 144.014 299.518 142.665 300.296 cv
140.935 301.297 138.52 301.649 136.301 301.355 cv
135.063 301.192 133.884 300.827 132.923 300.26 cv
132.559 300.045 132.246 299.817 131.984 299.574 cv
131.264 298.911 130.909 298.155 130.916 297.401 cv
131.023 267.836 li
131.057 258.848 134.073 248.749 139.515 239.406 cv
144.953 230.067 152.248 222.46 160.05 217.995 cv
167.661 213.638 li
171.962 211.178 176.244 209.754 180.386 209.408 cv
184.781 209.045 188.968 209.938 192.494 211.991 cv
196.02 214.043 198.859 217.245 200.711 221.244 cv
202.458 225.019 203.333 229.444 203.315 234.4 cv
cp
.854902 .854902 .976471 rgb
f
189.361 225.522 mo
188.586 225.07 187.67 224.816 186.649 224.75 cv
188.51 226.591 189.55 229.983 189.533 234.349 cv
189.422 263.91 li
189.413 264.943 190.082 265.979 191.429 266.772 cv
191.967 267.088 192.573 267.339 193.218 267.53 cv
193.336 235.972 li
193.356 230.813 191.907 227.004 189.361 225.522 cv
cp
.74902 .745098 .929412 rgb
f
193.419 213.737 mo
191.013 213.057 188.433 212.816 185.776 213.038 cv
181.631 213.379 177.352 214.804 173.048 217.264 cv
165.437 221.621 li
157.634 226.086 150.343 233.693 144.901 243.036 cv
139.459 252.375 136.447 262.474 136.413 271.465 cv
136.301 301.355 li
135.063 301.192 133.884 300.827 132.923 300.26 cv
132.559 300.045 132.246 299.817 131.984 299.574 cv
132.096 269.663 li
132.13 260.671 135.145 250.576 140.583 241.233 cv
146.026 231.89 153.32 224.286 161.122 219.822 cv
168.733 215.465 li
173.034 213.001 177.317 211.58 181.459 211.235 cv
185.795 210.875 189.925 211.743 193.419 213.737 cv
cp
.956863 .956863 .980392 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2007.i039.019.P.m004.c33.cyber security spyware data protection isometric set-06.eps)
%%CreationDate: 2/26/2021 12:20 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj]W+o)Ja[rHun;8/GI`6Eh`iZ@TG0KMYi#'^38-P8Hj4egrt^pVH=+s(=faZ]G`rV'jIZ4nnTE@p.5n7c.@UG[Vb"CKHFj
%l?Ti3cYCTp/Mgg<.GKD\Sn%`lT7qu3V8KMtZ;du-BNN&cl_%**K[&XkX^#Wu=&YSQK5,-S3/8kIl?ubefD\NVb<b)"hT>+D-i$Y#
%bh!buTTsQH((nLl^&5GJDa=R%S*9ERVZNZhYgn>c5i'rXiHDZA8aIGrZhX&E4>/QrNM':O<Bi^`U7!$'<IGS4"8)XD>>6jIB+Z2^
%EoC0J0"4fLWD4o;fm8as.NYG[lUYa<>:qbNkT<ItU]/9GLg^3bB))C$Z)bY/2c#9pXkGcpaC-#m'l\/siA&q;YU^/*AW]#F,M8sF
%.m`4$3D`g[i]+$hb<[X(JTC1S*@PPlr,9p=9Q?.-'jYDm92!V)Z!,1@gJW>H=0T%V*T0fknB7/iI]]@[iK$n3pM/tr(_jlB(4N..
%3\((EKT(>cFk<.I_fe%V]WRQ(d!M*m^675WXVd@4<'%5Gb5l<Df:^K_]#8U83"K5d^9qu#`O;6+/G&4>]<WCR$rKTaDIgL'<f_$7
%W2%Op_&.F*S`4AOVjQL*.;%8M#T*K[GaHWK[9*[b@-X%+c3)GJrC6%a<*`dQgsiWF]3;&?)l7"6UEr]]l4;kum</BnRt#QnJb<%o
%XIA!%I^6N92)hW/h@VZZ<@r+>.O]orr\Y(iU'_R2>W^P54+Er::dr"!Gp1&Hb8S#iWa`qsrTC#'k+*KVg[K0o;/=d-Wb8`Srj.t@
%ekX*sFK6"NeC+Z%7Ja(\D`T;s+,kFdjrhH*VZK<CWr<:I[<bonWa)&4&'@0qBVaiX<8h`Z#<W<CX\P-`0PnF\<@>kr*YqpY$^KtW
%s-a!pO5`"(>H2#/JnRHFolmNX$%Lb[QeMXc[734T-QH.Hd:Lr[>kHXIWP;^()doYrJE^<4m@Si[^L.c^fW!n#:]TSp^WM2%FTL&;
%X;7;Q^oG.mKSG(XZoE]K)3i=@o0uQk-l#Y57_<r.3j.#U;=+IW7kJjJUIY)k/7lYSg8OF@'gGc(eHPdg"FO/:9Q=jq>D$+2LU5Kf
%)47O8#o%L&]Y:hudGFuKU#".2/7gs?=ZNUL9?g(.HT1$dAn%`9%Zc&s>@B(U4"=(i#)uLKUM-/SH)sm>e#f:qc:V++&lM6e;Ch+X
%c!$s(?>/Wf,,g8R6Dig@Vb6+TCg+<m>$`7ac'Y=K*kg52J$aq/a\)1e[0hD1\$u5IS.GIe.i$Et#T>ot4BbB0r_k7IiScO#5biGT
%DM8($92I=kBE\9F$5]OZYn:$9"Ac/dJ8L/biZG:pa>Q.cA<sXm+LQ4mPuc4X$iL@RD-cGq;R(@!Uf]LQW)CtC?#FAVRCNSrk816;
%gmE\W@ODXAs2<jUTBTtHB+,Q):6(%Pc:Om<^BdTeBN@aE(qa7M8MO-gJ#Y"%+3i7P@2B)E0pq8U]bHNmBu@ki]5\1/A$ll.*Zaq)
%aC0oTT,9qj=_WQ6Fu^$bRY$`4Vcl/sQ,#I"bu0bJ@E'INme2m:'Q\XY=4MJ*^X*=:`+#aYnAMCng2]ZhFW**SHmARGL7&ju-M3Ra
%#r][\@+TBP)C35\;4u=ep$:]n&J:^`4c7?b4f!TiL28n>V]55"eRA'Oa'rPX8MP6bCGuUZ[`TB(i@#I/';$olK/G)-M_SN::bTmm
%);Tk/>^2Q<91$1g@jVNDVMg.2$0CM!Pl'>Djj"bF35=RA[8Jdejp!T)"ET'S\JR:^K>CfO6s()F-*^\fb9aDu'$L5_pg_WK//O54
%R>L$kq&DeDnX,^CGV0s7#g5^S6*^.X9eXl<@_AHE$jF1#CL3mgI;ZKN\aW+G2V5s+$G)-kMQbKLH^LZ+bn+cU?GLa2DDk-R2*7>?
%l1UTVW*:td+r2O3M/dcrA"&8gZq^(fa4-kcmHgnl[]Z#-1Ha:`M78nCj^n'*EAq6U:3lbc0g'@<YqnVfEH6]Cgn]$E`\MnIh)GcL
%iDCbSa&#S%";60A%G\)#h]=[oAhe]Q_rjLdgZ>*5=fXGb5rB-R='q@4Io^q$\,NAYWo7%gG$^TaJ7I9;X;F;]mEmVo@^.ZLnLt+=
%Z.Shi$o\)HE?F56<iWTOj!BDFr`hCBoMjYsI`"i?4`e(X0P7%hl;n1!HNsN)50iMrE_IDR`%VRc_jn8T@:5cXFuD!B*$3&ZG_dT"
%@7ct1*pi-W6QF%XS06_oNDf):'"6f$_p4KX*5dq5]iFu_lfAf&4gjLNJAaGHf&0>nD&k"Q4"GY=p;4gpLa+pDhG4!*2P9R8UV03A
%q:q2V`KFLj_ml-0/fuGF2q+ALN$XW9:MOKb:,ZmqEjcR7s,F9[Q^lftLN=Cc*TJ,],:Jl3ECRk\S<V*Q-+k=<cJm(Dg1hCULRD;/
%N?aK'h?Wksr68E?IY"s8`\::h(ks:i2YAa^&)]<@k5jT_oLZjahh`E:?pAJ/F(<Z_]jn.Qbg--X^aY7-28NpM([N+_N/sf<;a8mo
%3/k1!fB<!HIuLM\1O->mLALlJg&@tA=gMR^B)I74@=*+-!?pn$KF+8DLndqu^X$@Q9P4dARMjQlLRG,Kl8Xa-K!oq:<3'I'-nNhK
%+6"iM?$U!Zr+0=gY)UcbeQ4)6D/uIb]c7_Qr:J0=:nL=C;[K,.(e\^%&a=DOeWdZ9PP+hnbqT*Tj.Dcl;iQT3Dkge&e7Q`jh=*:Z
%PJfHR<NtdS@_2(]Q7Sn]G/QC73g9;d`5i\;cE*)Cbe.;hEu&gQdTNPSNjiMr4?7snCXj9'"GK1Sd_9;o\=92[_NSHP)<TFj042]/
%WCE/A'H?.32%3s\.k_%e!e/ZT#!\ZQP@?!iruM#r+WnM2<mZYZMQ5a5=DEL',K6$@`F9.gfGJ6>77AR^M./kH[5d\SD/qbWE#H7+
%@iBhgh&e5DhXXV33h8-CPrQd>MG5Y/NI_G7iHZtU<gT:hA._d6Puoqcktgt[%PD?tp6(sp;\>Z;k%Q28*+ie/I?EkaRATmu/BsX[
%\Xr.UR?=$gEUG6E_6#-cc8Pj'G&GQ^l'_(T-o"uM);0o\9<"e<0?SYZc["6&&r2lc01rMdjkm:#a^12\MfhL*5afs3.'X>'l>>$5
%m6ulLbcH'=Zb@5%Q7Sn]G0K8YPeoQM7>\q+XN^O1>c!k-4Z0KT3<j4l;O4Y;H![Qm?ATq>mrF<=&]>dY`?]da=8*MCG#!("-d9[A
%B8C0II`9G(,rbcrr5,bMqtT`L\'-,-2@cn#$*M5aJcs[<>YB$Q-?*h&!L1N.RkJt;7%ks+QCut32QA(Kg0?XR$*#;Mp-4OOh((f>
%'3O.`[NUJ^"M_Po4&ZN;aYXoc)TcM.`>F2;)C<k27qWelji#feVjKZ,[>1rdm%h9K!/H3T5@OA\*;hq0iR<;j@4:r[:lI\TKU(9<
%lPF1#ns31](nR"m_`tfeZ`U8L#-D.34&<H1:5ZG>]pFJm\`.!$/uE@6nS4N?X<\V2,T"qb4BJ:?NS2(ojj2_81)\/+Yr-EqQihhA
%.JS)rI`$Zei'HYS*"/0>">\8^0@T&%c.=oQre3U]1Ac-&I;""?2Y"gtkC7Ijs+DSRs7J79WBVRKF2gm84r7t!HE@LIl[F0t:AlN2
%9bI^i%<jUb!\ojdQbtRjh86ro'6?6Fn1\Yt:_+(GJl+cA*epeTp$c?b[iFC8mc=Qp2e\FZ(R;3>a+DO.Fc>_Y:VCTbc`#'PNVl/1
%0@#96SAg2<0kEF&Rt6`dI`_HTm&g<En<JCCqX:f.DR082XT)%7?"[KpJ!1D,,jW4/j!n43?(.>W?h,7X"diM00g3Whc$)bn5Z=7-
%8_/9Q2;_rhGANm.L.>E.4)6dmbutk[R;*]^]CNt;PjN*c0%^(Dc!n5*IaN`Kb6>P/1BrX502*pmLl2[30lOAd.6TDh+U41?)e\*`
%`au3[plo:GZs-]s^$!Hb`TCjj:P^;7Z6VdqaUD>Cl/![QQ=S'c>PhlSZUpU%MUH#b:0BYsKOK!4]YnauCffl6[e?Iq.u1777T`or
%21k,?FmUH(2Mir.@Uq:41Ai_9^8\1"`!ijdK;[YBV+S?Wm#-`a87>+c3),Se;'KHcJT7E2;fXA7f[U6jPA1V91s[&),l'.EabOIk
%/3oHJpgYZV-F>WQL=U(aa%4-TI:]FVQ1"%j5BR6Ma'u:E8s4Ej&hci9Ac1e\,[QYP99ONk&hj8hM&2^p;2H*[Kq\E;P'EDS#W,,c
%N0ALS*#-]E5+efG+<B]sB;RIUF*c6Pr#DOR/'3sMN$aBTZ[LLpS-oCqrN_8>(H!J)9hYd&a^l,!@P%Kg]BQebJ+-AX'Cs[X#=3';
%^-+32;[d?gDB+k0R&7b\-9!YRZ#La>gmWNk);h+2N,;7+@%+8<R)Y5'Er/aTqpM:i1p_7DF:f4&IjZ>;q-U\.BYI7'a1,>(3L)fd
%0#>aRB92SVaC:)]Pu=;IWE'u[L*:1?&-#?#oU'ssWh#\<_\UOP7TbTUag3ngpPHrj`>IN7UcY3b^pH[F?9aaH6tgWXTeY;*(p0K]
%Q\r'AD<Z))Z?K!\@HJbm[gaf:3%9$:R1k4D353lF?)`'B`,TN>kgO_G(s-@48KM@G,69aFA'@bC1\5l#D[u=TEHk%F(fMC<cJ"da
%neaq>A(i2lj=uf[`f/t50LBOYZ1_3En_$%CB4m3scjIoKCSa#FZIO:H#:?I"+tOIHGW3rZR#$kJR@/D=WjSU&WDse$qWs'1Z.s>u
%*:!lQ:[(G*(['5<C:gb^e*KRUY.>!:MCC%rj//EsTGcl2iV.Lt/]7r_qoV_+e4OV'NXTB;d84l2d#DE"TA24ZKV.=sTg+-Po6ATC
%Q&bC>UK/t,^L!BL(NGt$3OgUhN^%[;W)_go>:LE;nb=n3O)_<3qGW6Cj*'Ii>m@F!c(n`fqam:XI"KDj@YG+EP,]PkOB7SnN>)!2
%dtY&.bfn:cY;ja"q0&r$/56(UYE"H')0WSU=\tKl"bkMU[qsW]'9Jn5(I&kLp_]K[AhXs<r@>GR8c#>V/=4:qPK3/<RS0Bc,b"&^
%-AglJBWaRgMrBaCdG-iPF*"iS/;`P%-_?69$-!CnF"t0s_RUq^9>\4bS@^gbP&N$C"Q[d*3#@L@R0i&Bfc1-:nX,^COR?tf<]k:'
%E=?.dccng>2fBciLuCrR(G\ZJ8<%nFIRZL'2tQc9,kkdqpI`Zf]b1uhDLTCeAhM/l9JX0fm]-,`o'0pL-sWpO'WG+D$Dl>"eQAfY
%B'X(i:6o(MS!;dKr-7kXbbLR'bfVcbUZ0PZ/=O3;k-&'<1\F>b\.^4Z%OR!H9tJVjF2"kq[_J.Fj7X#^)9U3-Q+lE%-VETP@o<[.
%pI2/nmUc?*nE&t4Umo4"(FI+.ln</q'nTP*>YjTUE>;uu9XEP7$OU<I[X*iZ!UOa0&c8oA1Lld2IqX&O004)_gs-S!iGUI"_d-h$
%#*C)6S-8jD<SF^D2kuP"ieL4R"Rb@H;smSe6pAJ*]EQub5M6VMJR*-HB@<9=GCM"1%&V`7)!d[(1ZKLoE3]r5A&Lo>?^Va\0oWj2
%mFFMp=u@:X_9OQf;j971J']W:I%hSKaH<(31[Pn$>mc)<2COXJ2C)$oP3i1#T%rG31>Tg_6Bb<N(s^4aYj5eFGS&?K_m$f\4ZqBG
%bsNK3]pp57#)uOHU(YKBJAFo^aS6(tl*l]E[L'KLC)mGRTcmrU*2aY#VVO5O1%:$>S.7P)`c2aqPSl0:nI8*")e\%dc=-u<q:OW4
%3^%rs4(^u(J$^"JW=a2rLX1?r<IEkM.C6P(4P0<?c/gnAP'^f=*Q]f4<#=S$K:0MoQEp-IK767RdG30r30VQ#S->FTHD@kWD`=lQ
%OuCdO?+JP=]5FcG2b_G^G;QL)I/NdREKcn[1Ohp7EXZSol7^7]SqgN*r`kb',4+[r9BT_23W!IaP)6a(>PBZE2?R_?A,)Zp%gfb1
%J-%e2@olUT`BqZTaCa^;NQ(])m7dB*h1CN(RW-hidEF]%o*3k9cGE&be<jYCA(i3`$;TVPG:'VZ4;B*[:CP!pRss]Q4^g1h\#Y5#
%R=p]J;R3Z'=fH[JZgC0*-EUlrrkU-IdENgKio#sWj$lj^T#LMg_A);5gnd3S5%lYC=c`(mc^F9tQ&m?Y8LLKu6.2GYDjbW+M/[oD
%?^!(-IqFW#+6p\0+$j)OlnIa9X'1HGL.!j'8LH0,eH;b(mMK-YoPAbYWcgW&lT[&goZU7[%a&Y`F.^0W!ZfDtCStSjgLrN!;L:\e
%3"Ht-rC.Cq39jpE4l$OhjjL]FJ%Fi`X]AbZ5MLmM!KU;'UschA^dN*brW$_$qM-%!leqrZFbnd$Am+aZrkm98TptMbYF];DXWtIi
%]F!'W7CDi5Q2ZMZE\ULp<E"it(Gt;$BSi1`!(]>kW6blSJp+QSq.S@=k!`+HVGr\j<]su&7@.-qr7Y!u-sVf4>+F0L6*jPSBrY%B
%%'P/;dpL8p%:+4X%ut'lC9>CX:]o6!dSj.B%o(ZQYBN52qN$nf%_o^Ym;EPQC+o8MZ^!$>"V2.6+oJg*p#GsC_2M^eW[jO.coB=r
%eB1)(BFX#Q>7R^Q&S#fD%obnL$Tnn,?!Znu0tc]$Za!Z6(>G\:0G\tA^*/b,=o['o@0N3QgP>;kF29D'Uu2K%I9.h>85%^H3;qI6
%Hk1]$gp\.s]aJe<a&!]*Y;B)mB],TU=hpQWip13docpR+(Q3@<9(Tq6]X.9,=D22We3ih]_LX*eXTYI6PYP&$4I#gcfdC/h5<Oo3
%[[teXYYDnk!Sd-M@UIcHU%dl"P"V8a@`u')gEecrHt!rM1m?_"IJDbJ??$%r^C8WI&mbXh#uE!74[)\h>e$(mBaTo(!7Y`'PqJc:
%'N075cBa3#bB(49&@ViB0>ZuXZ[W(`I@ahiK%UHBO,qtsB5p5:A`&ff<9fRR"V[')d(X-!`,03Chdm*f-SYMb0[6[E#EllE!n4ma
%dusTo99-CFHA'KPkD\@tT]<YS;Ba6d#Fo%6ZUtM>XO!)1_?@5q$a`>(g'MF?T`#7kbrD&S&)j[Uk[`G^cT%Z.mD?N1r&)%=K[nMW
%alR^)Ikh&l"LNY!["Y%r6k[jA5W`+cS.0>(+.gISC>h,Y:a\N!!;3O?f="*eUsi5O!8<YDZ,t1Tn3?KC/X*lVUucig&RkIl,U8I[
%p2=?I9/g0)R%7W.K%UHBc]hn`%o6\FG2d-^R%7W.K%VrX=S'GZfU/524=6Gd@.l6j(U8\J0#E"Z_]Op2&\8"Z"h/3,LcSDYF<6o3
%Y3..dYS4hO/\ne.^eOkk!UKrnB1f5eLSsYB)ZmY4XCD=a$"3c7?mk\*,q/^FTlb<k-:-l!V3B^-$nBj+n2)b01I&_B"LAcc*Xf<<
%]Ccf@r=uOOal\TdC_O&O"UE`O*Tkc.EQ]0B<U,[CKB25SHc@H,eTmM"-Ve(GQXSTfPAG:Adg8_J9"*FI4B`4/[O4,hAsK=!d]PSu
%m^m_$4Fu`"VLJ]FAWgq+?oil'A5R:M<,$f+)@rYfC6Jrr-RbOYoXH<oE:hT6p)QVJ&)XVqXni@G*JYC5D0<*)r("=n!n.HLs#Nh8
%<cV5'Ja!<7PJ%nkVc`Q.e(C%Y/12d3SR?V]N+KH)C4:CG)mGNYiX'!?J=S[Q1T+@H_pb!?%>pK[G(SBRAg^@I9PN&Tn2)1o]1aPS
%OT_m%^eUEdR8^3_iG!,P:(ecXAg`t:38(X7<V+,WfRTOJTU,Y%!n[fec^%VV%o6[:[WI[Z4qbY+!'Akg4U\hX5<Oo3e%VBCQ:YIF
%Ja)6MOBKr,q;H$MR$L&ahK/hJ#tu^^N&.A6o>B%eR-c5^SNq?"ftZHJF5QO"W@]`u['aQ6X/pF;%ts<QV%]*m*L'<BJg<%@^i\R=
%c^nUj%o6\FG-Vu2_<_<2'?m%.`L7m?`l7<*MX(DN'?EqS+g[h7o>B%e.%MnF-7GFXFFqrITM+moe!MPSg^oXAFFqpI9$`/Cbn!T[
%U9rr+>H8F):1/BqR&73HQ>9psg#9e\^4L&!B9!jEo=5^-%OreRSY5UnTX:1Jdg8Vo./aP!ZnH783-i]1.q^n[=dF!<oV!pP4*ZpN
%8U[U$!U9fdIflWtR/h@2e-StOl@F!-OU@/'bD#-aAomp+c%X'!K8Kt-rshXKgH6+1:-eYW;U_3h-#L9c/Di=aC!U&X&cM3qCJ0td
%FFqrUJ^VXuNs)9mPYP&$(3F8>GT%*h^#Wse#tcQnr@9;@\E-O&)SfHGhk7?O'-5J]"Jlcrrb[mC&sQ-f3^N";3/a//9V(,7^Q-pf
%k33#P'>4=@gkXnrJn`E5(o&1=k;1PE['(W6qJQGc#uppW<$uDF"KE-6*Y59#8+m8?c4<]\@]bj(`<k*B=SiJDYpXtaq6]q;*'CPo
%r\3`9UE##(9?X05#-A=]*cZe[^P^GN>U=0;#tu^#r@?R`jQ=&WZR:=W_I<g`-^^H4G*9j9_"Q**m73fSm;hN62qT1:.eRfeCsDVS
%oFI^HP\EWNJcJNFqZU6hE:lSCNc`?Tn/]R<rX(%5b]3SpD>IOM/.[:L&)dL8>-!F^L!5R,Z;iJg)D15uP=Q1H:0uMO#7YpO<'=Sp
%f(<d'?E,%Ljfm8B'lsVXjR5&DB>fbtH@gTJSC=VgMj^-:WPspRn:%^o#]P;Y5G3"ApKnodh?SQ/kFaMBlk\JbPZjc+r-MojOD]X^
%MlO)dF#\U?<!Z"Zd+ZO])Hl[V2D4jiSpLG+0t0Sd)ueotlsl!@9O5E;.1C!EOF<VtK\C7W;k*/82S"XPYl(FXF6Yd^iObEJlqVDV
%C1C54F0g9fZ)Bi=Qpj@)ga0.jlBAdpBeId%E?MfkNqq<fk$(rYO<#L'Iq]OP_'Unh,R-onG*)*iF/6/`4mpnj^]*i1Y,;@b1D=46
%['F>Y?_'!QaQR=oYW6<pLIXQZVmS9\p&>F@.dNuBCI*/*="CX.@C;@.=thK8-S'q%E.i`.Jls;1gY7-Z.u$D4YGE$7WKaG[?o_o.
%)Pto+.r5iI6K(V5&cA][ge]M,jU)g#Ej63WFX_8QG@7ADa7r0jB0Fb*([k@n-U32PEt'fF*'P5<hQf@tE]Yb0&"5im<l&2-Ek43S
%hS7A6:dHKB`YkUnX`,-n@h"VN\hk-1SsHBFkV.q4,j<HLfQp-E`*fsape<6Wmgfc;ISf#574C2JLTtG\*(`q2&]P'0eK=<i!R"5n
%_BY\,G-b2L9EG(i;&*AR#3a(%%>B'E?W6uaGlo(U[f4M&<,S<+4U([F"%_9"QO<<dit*GULg`FpFr1GFC\[n@<,>jY'"fhW(%BI2
%l)-ZPK"4bV?%f'GMc_)8'qG[A+iGJAg->,il]a*1%+2@O$f;jSZ_+K>q`,s]0p<b$b0Oe("b+I/Gh1SePT[&e`ST.3VT,GTX?<Mj
%)hfu(\aSeP.DXG-76`81.k$"UFT\3)J%IL\ME55[9BWlY'?N".2-UR.,3n0WY0*N9J]nU6.J%<>Z3l_2XkcU?2eqaVojpe@=ug8M
%WDcK'6g(V<p/CXW*]?p@;PdZrChhk/`$2<Q:i4bc(q@FYBXUlnir>""PhY!Z.NC9KVmW0p9GM=(=sM"[nTNP4rN#%%!S;=E1V>II
%XbW&67^h)XG\#')h&KR;,K_QrXL;&l\\]"W;3PbL%&uODk##bR=cXsA)IYF<r!66AiBOHo<jC-]:.s\HlfT!'V;b>R%m96&4d?87
%[_aN8Qg/:]]$^^^e<R*'m0;,4G&SM"%VkZS*E1[LI."IJFjRtBT\0YkV>l_@U^fc=[s")Not7RH2D7P5E5fHqbOi,C0;We?>E`HR
%NT(5q1fY'D`I9tR"O5,=>#6h/qhMgeYI-F?27&LhZs0r:c]NO@VRF[Ue"D(*f%]<K!2aI2+/7654ftnKZi,PG]`-1lbdB$he(.SF
%j,Pl\);F/Bi0IcaA\+-J8dX,3NqBPPGH!33#>W7]QS1/ce[r<igR$?<Hh^J[3X;(UOf2;r/J;4Xbn2&=kAdW\c"4@"bLBD$?3^XM
%VJ&+>[JqIfe1i12!55J`=erETEog1V9XR.[qa?JPV6q9<H.<CD;P\KR+(70AX\DuP2`e1ar%q2n-g30=48F'1Co54AY^o,qVZZ4.
%]BTp,X\oM;':>d?0,ghmW2(K_-Au`Vd1aIrXaaLpPAj6!d\NJO=&l6O6TGLsc[lodYZiU\AXrWl.PTMIM+YYcLQ.j0:YG1!`u)s/
%dfU=.99*#E+Yu[,:QAh?D'Cn+JU&6T#IG8K9u*NhXafWD7LP^11]bUb0>a>+KNopll@?^<RJ@(Ap`*<.C3R8HB[A;;rW+5R^^]lr
%W"oSOF8%b=K?c?Ld@JX4V0bqJO2ibdec9*t2XWmr1>7WPjE,Omksk!@K-Lgt.rSC2ZU;@*8oN^.D!Kt=llV8%_Y\Y2*-\:9W8;`1
%bt?#n?MRV`9cJ]j0#W%M6M-TJ4@aU,7&^C7nO>=Qef,ik2D7_r;](qGcG0i>8"pC6#!%EZ;[9)Mc,lmk%JO-G*GsAIAc6oAFJjFc
%96JK*eh?4bIa,GR>U-GI*^CYjZ=qg4pUu#^\P/XT1p3C?V,`I2@Z4)UX\+*WU">G<)O]I9gW^9V3FR[,ZTGNiQ(W-M][E^LI2.BF
%L)LfT0Q_S(K=]WMQ.&0%(QEU6>(c.[ijrB]MgnISHEdNr=0BR37D1[d<g@(]PT1qm0YG!PFb502\m8g$Hmd181KYbr\iX-XfduN9
%^,N-0:Z@/_Bf<?L;?c2a\dV%_Id'nX32hkXd[#<0kse`U4>,(m^V5*!\q.<+6n>-0J#75qYfi"LC5;7ZHX,s=D%ui%EHnIS!PG9b
%QljRlFLd>/E`_maMG_k^@e(>QB'Hrh-uL#\Lo3;)EG_7GZ?B7uO"phFA=EpV7RD=lC?X-aEk.=8FBju;71-FPLqSLn_KC66dE![p
%V-QH7GiZ["NFKKM."SuDoL;UY9:g\h^Sj$hgBg@S(9?&UV*VB=eV;E!fB](^A/5uL27-I!r6-jpD.LI),<0NUlK,n/COf%m.TDnh
%C,6Q=6."DXrtrU!Lo_TG@gn,FGT?ls\&'V@Xk*V2(2HBD%>Uo:'iRBS2)VNc$Td/p[5sL"c(1QZ'sJcCLd!Z,`dWsu<+seHUWT5_
%<<Do-<4PKM<kjda@UsHs1n*#&Yh'?KZ8OF0[q]!m+i=\3)k.\I9ik,"Pj\/h7cEd,%%9\!eQ07`*eAg@:q^jLX'Q0_=K^=@NTR#R
%,crDtgPOGc3[IMi/^]![:?]rE2*;C'7_ZSNL4YeD(nj<!&<'D-6u?Lio`Yq[K5hA.2D5,f;Sq`h$VQ1*N%(gS^Wq'4XKSgp*/+:j
%eC2+YCF=ng=0-DlCNkLI4hjm:83q)8]2CP>AD8Q3Z7mM\K#,(5<Qr!Mb,#@(#F2C@$eHO3Q"XJOIO\32?fUQ>M5F$mrJgWUBVI,.
%g^B%:G,6_X3@o-#3^u([&5kGsQkq5qeufdkdk"KiV_o[c)Vd+u)dl!OFKpsZ8"nAuF=fB]\$N')X\G/XY.NJYNpD%ohWT+p#DiHg
%@=Zp#1CiZ"8`CF65;02XaKC]6ejU8pp."Zl;a/a$+,_=dVitj[./agF&&Q=h=;V#`;09R2Tm`fc8d3b>=p;F!25aRr]uF!=S^_g-
%.&&ptDlLtXol$hL@_=Vm\j7uJe@R\&Fg"YBCRkl<W`5h5*dY;(]SU3g*O-U4Q-I:t5GiEV]pR6=H_D@]afA\r4#frE%4g"pII#2X
%;4/$<^Rh`4&kJc&9Bee@dDF=aL<HMfIjSBj1-C(n7fpmKCT!g`\\)egh:GiDV8fiCOO%^?WI=H<]1Z&uh219c@U7/m/(p(WM.M]*
%GBQ(r(D^t:"$X,bmbdp:B`7>YqeO$[V<?jprc31WZ!FnB4g3^gT"h\?G^m%6UmlSaf?^n\40'=(\"E$?:KMa)h;?t#ZjSY(`V7"K
%B%qM\X-rjN4(#;]DQJ7X5MT@JW])l*0DGl2Za$rcX'nU`De77e^"V:E\&4ucdc2^/>WR<5r(:2*`V7`PbiKXAjbN5(mb?p+rF't#
%;lT.B1HS+/MapRu47.F@^ABhcXaL.#1m:#-St?LomB6*-jI93m5@oj6dr0uMg0JUho>^W<rq"-E1L59j>?Y_'(Uo<8cjYn8rp.[T
%4*UDoXj!(ib3rBWZ59Xf$i,AHN6'Ut\H:Oa^9R\0r``A7FLo$Yjnqa\IbjmmgF;RGatA%umUhKFmo3:7h?CkV1uj'iHrS`J33O)V
%0C4n1our#tpF,oZl0G+(c24^9Rpl3QP;ghV>c\YI_'T(14k_sO]hhEZCF,(%dbV+-V(^/Qg%*#/qoashTA#^hUO1m\JHm-0cS#DX
%j0$)k]TK0/mT1GmhHO3HPu!H6;Q_k&7&Ei6@?3$B=]ArUpUp;+7S_eNj]c..=%f#5!=5+\4^MB"$F=;h:f0?fhd+megf_D`G&,3D
%nBb-PkG*CeM;51\H*mRJpi2RkhYBk<5,g.792F>uG>Kh4h7)gQ.Lt!mm,\=n=Y&^*ii^6ahq?2T"RGgQ[iTs2?o'E!pd2Ab&ST0F
%]tIq)?QMAPYNoQ]Dms&Ons`9V?WCt@4l68LIV1finmlNmkFS80eePlH]Y7GEp@8S_1[6^E\"@e:1JfRu4R0fH:)DRBj$P@4g-g""
%ATK4UgpsZbe94'dh[5e3gp]eaZ]u?a[t<Q;h5ku"qUPGKgrYc(nO9.:3Oi;Gb8bSS.Zfdbhqs!OMBB:`I=9h07S,%IO1'MJm*t0_
%duA!0B^]`IZ_OWH%4TdG4F$MZcIuJK-*.uQffEQ&hIQ"tcgr*8`l2_?Fmn]rP*5!m)D4SMiR4K;c2Z3VR_>eH&%ri1-![MYRTY"0
%\@n9UQ!)[am]=8IgK$mGoY`npD6+beDJ,!%\(XnRZVR#q6Z8e#Y&Oh`a,"Hee"ob<:pgi40Y_k9ra>?74oDO,C99_EKoO*8'coJD
%MgD*e,T;^!mEE[n7QS#mr&'O6p-h$Oo1]E-"dE!"U[OHaRJeel^&7$GF3e;K:5eqm@c]`rkl<_[B?T`'\"1[tf'_Q/fk8?L*qsdY
%RXop@qml+;Kb2sa[>nW>XL$Hd[B'8n03<[29<IUXm8MnlZt@)>)j@ZMLm0hkc&t`H\btuJ5Ie&kXM`Xn\9b=[F8GA,.bW[Ra3Qt4
%2m&[$!_a9sFCFq&G3br+aW,_WSm*X,?HfGWcL*o<1WOjMo8P]L4$e>=Hh@l;=ast!I>ULi^9ppean,8^eTW/2[_GhPr-lu!5SKt6
%.%%aCnbt.Kjl?6+_fG]aGI^ek1P!@>[QM3IR*N?hIoM,6\e*[338$9Wp\$Oi^E9d''CtX!mOWGZ992Y(bi_bCgq"Ut!._*n9J,G7
%n#9.b/9'9PH+I=3#\J4k[^C3^GRO]Ml7G^"GBY,lH0blaRQ4R*W,@nnYDUEV/M(q4Hh$+KEdiG[GsG/^S+DD8<W75]@j,'*DP^3:
%+$1-9H;@0Em>X'&/+VWOhB=uZniA#`h7C5;+5Hh#agO-P2t5E4cuf!6$;X`qZDGObV\/;&1t2>b.S;PqCDIM&PMW+M\jsC1'g@%>
%Y=C0\+t]jqb,d8ZV6c[Rj<l&7>?GDV&K8h;,o<tS`DS?N'rbfL_;742U@(7&hH6NsfUW-0'6OAeJVl4_1WZQT)7tS)FH!RaWia_Y
%e^6TRf]b](dU17l@?j?r"%k5KiDX4HBkK8&@I0O'aQiTTX(W')BLnn1f"8KW8FXa/nr55[5"S!qIDSf6iHTJp-UqdJH:R$Nn^[Fc
%<>@C)h<>&!djrcmK,!cXZ)CFHYD=j^C?Md(dfugB%,J_9]+JBjIHf?gc-=W*HE;@f).Z4tEJJ<\]K^(7qkbo$'+O!^5#.k]=m`?O
%BlA2R47CVH^/g503YS_jDgFhKUnbS%(^D9A@*5Q>>s*pN7&d3K-;S,Cou8$?Y"i6&1c4Kr!]ZKCj\H)S+YaeXdIEH`A>0<G4_fOo
%H0BS@_*7fq,)CK/m[Nhd_"fp_%ABDnAe*/4?\$&iU>BNI1<4<><:_&f>s^@%$em$_/C(!Ejfu1"/Ze,2>/q.4euXL.O1*oXHY.*K
%o%bo?UWZU"&#6_ZTgE8ETUZq)b)a,c2s*Imo-3MW#G:M%a._IX>l1apc\TcVcRDKMAa'e\&($8:HZ$s-jeXappYtF]]=XKt8XMN>
%*kfi=[<=$(O*4S?H_6Vq)u`1[`#OOC3oQKA@HZ\@pWWVKp4,7Em<)ET`Wj:ZoZhc.mIEO'>2f-_7XfZ4R![\7piTC:)<]]9S]m#$
%YL&'UI=&YH\_Z$O)ql[pFgGJu5Gb.%,(4lQEID(X/r'`bYVmq;Ih#iHc<`Ah<_<T=_56#b^8[WB_/Fh95$AjC.R>lHd8EJ3OZ=/4
%^WZ!,F5PiGCmMfG.r/d_Kl_3]+#4\!-XW]4/Cq%Lb8n&`HalT-c^h(4Tlk5D'mR5!UVt!4h"gMnVlGGPilP8@i:cVX?9EPK\PdbE
%GZDqfGGogSPtTL'FM8D?,GoV,iSYT1!*U+]0[$]$FC4?I=&4Ri*;?$QFmmP,K4ea(4?DFeDf!eN<W=h%YmDrr+6C8/4RmLIn)YET
%m9AB*g\+s']ru<:ps^+tBMI5:%=`ek4+$p>)c/Vgit%#OC+<+@M^H8A+SKCFhW;!;-1bJ-5J33;Wj]\5"i'%7'j+hS]CO@5L#(qF
%<sK\[c25XVSHroD?c]m+H1WGUHVcO03]^W[B?A?jl%-8>ij@R!V#->hr50i'B(P$2Xjop;[SKYWIXOtD(t1.DQ[=e/nNT#!9\rdn
%b'_<;o#J4#&#+`.[9BYr/[Qr[EPOe\nfenb%VYg<S(8)!bO.r,:VV5JoM+i2Zu@QTem?#(%3alQXkq4p1Ip3=D]kOi%DMB/Q;;ND
%+Zs(Io+2Z*N#j+=4hYO;8^dSgJ66LI9)s)S2n)QIluZb)p&/u6;N3d"gM:HhK5[1<f>2fI@C9q55A^\icElU<X8>g9Qqo6qCM1QW
%L.+Olbr"jk/`nl*4\<`\B<oM4be;f2*?L31`a(aDBmbpJSUYTT?H_N%&,ah=pR`O6XYN@(TW?r*Y%aE^4h74/7G0eCT=8n+_rC7,
%lH=+4Oj,q1Ds+0j3h$C)\6T&?/*0ggX_jFK]cXC^KO;IQO>_7M[W@KeSA'F<T]P@ib5N&2CH_+,909cC(*?qo&"?da*kGui-ENtj
%W)2p<45[`2e[OF/CM1sgcSnn^jh%QkpoQl1rtP(OBZ8SihRh+4nh,9lMcu#McF4-'_[gOnYeIkF5)+Dsf=lkoSpPIiGIu><HrJlb
%#0Zc5mad4prL>r2c=)<LCT4boc8Zc2O'@<jnq0+Z8nTs+(G5_orS+Wgo(#N;G]s8QUVD2aqs0.ZNFfkq3B1:>]NY0kSUo;J5"+(G
%Gs0;64^J0&fmO-DbGWtfPI6=6r`8iYmhLrVq5oYF:CCUo!QqI6nP8E5C%go<P,<etd8)j<qgCK>=S!X,4_(D%41nK^A9+s(0:0$,
%MKK+qF8<Y#ZF^'bA$,1*X3BgK,TA-]]iVUs6VC:=eRJ(@qpcl4Q?/AliI653F>#Gj\U\87hAsr%9A`A]X8B*C,d_Hn\Y;a(](*<"
%mNYDsgg9.4GiS[$"hE+;/3Vj*DQMt:!r&\kDL;!:k*r92gZTQ&,M,SBO1CguiBc%Db?J&Ds5hNX0IGAOr8R=G]Df-4q3H2c[33qk
%DD0eQ(O%ZJ\aqnTD7NhGDh=0PHJ#2h\V"#==]e&IqmcX`m_T8[q>/\,b(k;H>H[hb*T+JUPWu^"mg(n#oP*X7[oS(.Q</i`]<udM
%ICKR-XR84a+#CsXpMTZ&bgW,]hHc]%d^l]a+PH\cdh"*VFsk%mq$b!t`XZSco=:]--V?1prq_tLXlGB4&'o\$CUO:\B!%aqcn5G<
%90HC[/fdH")oQI2Dk:9QX?W]E1/YJb[I+L&,KsKND`uG#mr,sip@si"58LHVs6HXq1&Zrt\_MH:iQ5-&HNLbt27/Fj0gQ-T45p`<
%&0LgF*NRDroeQR*rBVt*i]Sf8[JK[;b@7VVnX"Q&4J6VN!;cSZk8cB[OBh[/iH.fIB^J1'n"Z5WDn.\(Gr^*FYdE?WIVl1L1Zdn=
%b+\MX%B9C\#d1ns>ksV2nR?o8q/H8^d;j\oSLru*1P`H!<8T<[+ZNeJ+6PFUZL1'8amB5mKe#u!5'R(&oD&rK24]*!EuPcuI5>Sc
%WI=8"^L=NF5k*=Qr2k`I%-$'opl`s3#)TN;+.mjbonnN_%o`NYO6%1ar3`fV[tL["@4f7(;p"eNT3gBrk773GndBRZE9;"^^*0d(
%m*;EVh@]\Npg(6<R#sm_2DajkZ]4Y>oRk!)@&\M-Qt61!V7+=ma`ci&@kVG$D_3kC59m&0rpd:_9-6\10S>_L%r^TD2p3;5*=o6(
%h1&bL_"pKsG-V(O41)S:b*)Hg6/f3b+NiGgU_O#s(XE7TgRknj[Qf,31mdU4_QDYlB2F/=]B#U2;CD:em`&Qc]mm<DV7]UZV-<lW
%K-_>H,C9G8NK#]q=g!I-iJh0aF.^58k-[9PnW`4gQ>Up+r2Z:;D9D1`Zi&g@D80<'Up@0fh8'?XbgC/'9Eg[9]mZKSh"JI)3D^[@
%lJJB$fs*KcbZh=naL,+H#FV@\COXgL3/u]gV:5W0QE<CgbAR=FhL[uI/(e37a$ePA??,_b@$qs(_t.XoKrrhXZfMe\Npj[[]G5hM
%\Xfib]%:N",>ILp8Y3YD#N@@Ym/uRQX_RuEi=ugGfa.rTfu*::NpjW>N&6+M\&SAjq0VLTR'k[O#_aBDmg@mM87g0N3)+=VZerJ;
%CufbsY?JL"Mi2jc:Yeku:RQ6"+cg?<F`6H/C&0hBY7C&;G6^.;g;@d_.AHMfAR7M^!Lm5jY\nE/hJQIX+1Kl!VM3t5gm5hIlH:iY
%mJPQh]RlS!U:'e-h$Wg7b][+kSFL>>(9G]??n:(ck0EDFn$oJ9XiL7$EdFRkRF7FuF-&raTj7QekQk7S*qd]G4K&U+''p`NhnNOi
%g"R;n)/m.?_L2^Jkj8NA2OY05h9N]YrqUmn>lSiV,;^,II'pe,T@Es65-;>qVu-5J^5h[Y&:H]gQ9T)3?I!KE&!)'=oN[h<)Ji+&
%DueI8A,3uo#+)d-5Bt5@[SDl>Dfb*e]i#r873H43.l,leZF!`B80#/:!LGQ#00ZOgcY!_GlDo9VG-*]mkdoZ>J!_a&#+)lUV3QX;
%(L,kLLU3PR.&BL(NaV8sjj@*4)/hN`)m^mGKOAQA%R.toYKp8?\TW^n2d_+TEdp*9Y@dLDU)lP??EUC`CU^.Db&[QpU\8]4ZPc.S
%UTX7>mB#n%O8Eb%MQ=;Z0'LdgNpl1of#.5CF'.2ql9>%Ci3GGK`aR0L?f0[CqOG5&n+''uV+]hPf(`/M#OTY-LX1%>n%qGZG#+]H
%^H\]I-,>J:d?)b:"Jdi3NrdOmo69!0X(P5E+aOKGrSi0iq@oc*q5_IMC=TomqOk>";tfl^IXs(;FT(KD.JNbkRFTQ7.U6WSS*su-
%Z4Qhc?+JZjGuPV</V!6,Gr9eHqtu6_9`l'd)Yp]\AsJFdgZeR$b_luB]T*?WQ@f!<L%amehYo<Nm#._'C\a0j2llo46kp_\ebVsb
%Dae"lcS+k`E=Lail#]ljh;-B+^,K,4bK,/#F6WXoSu(lc'WaJ/hX#B>TI8B@"hsM5rr2UXr`LP)Rim</HT.LBrofBkh/p2MGH5\o
%<2=@;Du!=+Y2$aHdQ^#fDS7Dfr`O-?I9CH#N]6&+7&EBY`)i7W9J$q?42"S#LrITl`nKV-=]sQ@B"?7NT/l$;Nli:kVD`sbK-F"-
%dQ6mQj/$YTmqqOE4'S9(\*j'1>k`O.gc\tms+,+E>0a9U</\Rus86^93r9>HDJ.X7l.3oP3,]j$/:>cHGF,@@nss!S%iL$/Q.liY
%]KY/kFR&uAs7`=qs0['_?&l(#l.lMg<"8,201t=[f*M?sYbNt"^/t14O&)5'3GpC]ZC<U!G>njj1$Y_CXc!4,/\-#k7bmEi9)A7k
%eq7^ZCgkg2gVo48j`6h#YLFJiRl[SWj)#n!ngESllnt8u;)DDI\.R6VUIm:AZ;fMp@jBSGF"rBDHY]eQ/Tp$N'nF:]MQuKlFs"C;
%;DXTpe7Uiu%F^BWj,:,ZVLh:)C0cKAIC(l^$sRr_E\mC_79E8A"&t@]:edXF*mf7'<4K=u'f>GhB4n6T<[XGah5#qec_c#lVrF>V
%G,el'=)6>c==iDEl@u>2*5>fVWiGek?2CgjJqg$-W\=LR<XgQ/KW,T$HO`s85eZn*0)u'9Q:hC(P=i/e\A/UC<-*.,ZW!9,=gnV<
%hM,@gc8lsq2,io--!jZF*ho#kJl$N^;6#[:"(J'H(nQed7u+d5>_c@M&"9W0iTZh0pih\F#Jk\qdrWZJ6oU.$iu6P6SC7>`[5SJ\
%Z3.6k\OMq/[77TGJ8O3NTCHg%(cinl*Bn`&8%!K4N`.(k*7R6SXug_C%BVf(dA=`b9&2FY]"4c;'^]r`HjIhn[9'E[$5\\*--Uoa
%WZ+rnSil5;i7beEL:f>%Q5P\fhliBo0q+c,>FVcKhr3liW>Z"t&(L7R3/<M!h+9LqUACnr5=ZY(1SI*<"<]io*si&3Xd>gN53Q!(
%r:3M,OlRZu;Yt=YgT^Dpjj5a:D?N0_4"(!<7f#1ACnhmOXml+[>rf"kV=FoR;(/74kIBhmZl!s'$jXoI\CBiVN&<?$fc#*ADi!CY
%R8?8r/]PQ_le55'Q%crGl+/+?&RNoY"F4An/Ge83`ap,c@.Xn(f?FF-Ill0^5hUD2@0h`/,iM)jI#rl%nB-U3Be;Bi3o2R0ZWm^B
%1PJ<c1hc7\5JtRrfWd8Qn-lq#;q-P;(``pT2l'%$5/p]\[8R4uQHi+M\\AtrGg.7.f?`4._7DDf7bX`U!ZL+kBckF4F*/t5gTEM'
%Yp7O_J+g8PJ@[YQ[d^F#^pD!]-LuDmdM:A=mgl)$qV?^<]q(ql.5k2,[LR;%@Y3i0"#/qTI<Sp!p%R5X$/mp-;UX?Z!m[k:nPSd#
%gk1un"O1NS0!U:RZdb7(JYuaj[aKk54*#tuak<6MAI:Y)dru7el:M$'5n*4c*(3LU>Fi^NK8:'pR9R/'(>K9:kKqKPdr/&q$Ep*q
%FmbEN)SHQ/*i]$56bEFR"/0e_(js*P^i@M]b=<]cD%pun%2btFcY<'#Lh?`Qjb([0^UcT66pRk<cGfFb]^S_]V\o/+oZaD#K@J`+
%^](Q1V,Q_HC:?eZK>%f+7/cdR%Rd6fT0R*:'C,dY^Q'q=_iC>HkI'M0@dj<qlT]7XJ,T2k?haoU38Yt@:7Bk-P?RZcSp"@IV^b71
%d_b\p;XLj9\Oc)t/?>`k%M;N?g6X^Q6$(M8Yb`PsNpcs>VR^J7=[J"qk$S/I%+oS@)lQH+\H"FpMc?)[N[Ko<e$cW>b(Q=/*(cFT
%rE6S4Vug.HI78:,M!:#>R)DU&2pLmAgJ%+DD)8%[Sn5Ib3YQb9Ptc\tdM?ns+SX@5F'U'eBubBg"4GV/8<POK\L6WI%ZE\pW^bmT
%U`'VSa1#p9)e""E]IqX\6!dfI+.U;.XpcOSGW&6\(4dEo3PO^_-eW=5!*XeQlabJ8ldC<7,*?1DJF5*^MX0]@TKk2;Buq2-PSRSO
%mO/]lYssSeG4cEV0PEW[N/(lLoah*<WlMDgg?"tq32l>0XiD<_^)t_B)]aQSpH8;+O.pXVVd93)_(oL%H4SI)#8&iBpS"oY[X"<G
%+P8H2nV[Q)\@T%!Kp1LU#AbA#L>(fNS1,A4)b;(\)g&*108$,]N6:,BmMr4+"KIBtaAAKpE,H#PnPhdk7KB>P]tDa$Hp+R.c4/>Y
%WUP/D3M!l#[Ou=6IW.YNm<g6YIC@U!/Nu_=H[E)Y=Ml'Ai9C$ZcjQaF!.m0O8^W`9BiuM%0*/E5-Pc,:N*&Ys\AAXc>^:;=]/M:e
%5pPu*`Wf;)1RD59S@$1b`JVM5.>13%pkdRtXC0-//kl`"!sg2o!PE`1`m+\ajW5f!Kr3(=JdoQ,JhtL`qJ@3T?]Q-C*YskY"o//F
%JC;#WJ?2$W^!YO(/%RTo,Ahu.fI&lAVoB(9!=);]Ble^B29eU`(nce@_:hmIMJGd8&_D.bR8DLVN0L,l&fK'F"De9#E`5L25)*]a
%Klt3OJBpKliMS9bB3Mr#QI%G2ELC`W&XZ[@`*=f*\Hf<QRcWaI^i5=,2$ZYrLBYe#g-\)B=-Gq-6l'K,U.5;*\\?E*fTQ00X'J`J
%nU2JR\G5AS+P*7Cri`gZ^T8Z4poY%f]DPl\(]KYTAdgG$r=R,,nR;#A4R%k9D[9VQpmpX-??&iM1[7%5#qu26JqA"s7C=jZ+KCEn
%@ZJV)<Vu6r0YcQ4?Y-#gS8"d&(sg$_J\"`M!Uh'9po/&KLuR^r?jLSl<dm5c4<CDP!mJ0=d3)UZ.&mM,;bD2QPH$\e!gXbO_]/;S
%I_kOn^lTVG53DOBE>s`G9%l1)/.$tN$M"@F*'f+)6]d9QF<4^NDER:om]-r__U`H+i@74)5q69)YA2#&?3s<j7f']@UZ48*D\^g3
%5!F(MLi+-Z\-:mRW%TXP!$hg\<'U[2XsgFV`G#;p$l>M5)I^)D<HTiE3$g69\L0M3i^;"-:%:Vd5kf/`r@:%3W8OP>$&WuC[Ian-
%dKeYK8JWZcJd0#\"kCAVq'i6L6'7OL7WK*[:q#OJM@+of)EqMh!:U@>H"oS\B?pYXRni9fV]/M1D+A:8HW'(O$)kAVU+qTO*&T+2
%%2r^)9EE6B$WR1*Fd15T'#Z:S;,iiXG%Ct=LLgch"f.;?ZtQ-6^mX3X%b1jCm<Y`4?&Y<(RI1!Go21"Z2N0GL%`[U.;8It*+g]W5
%B$=p&_.Erk=Gca;8hoQKBXDTLOk,6m2hFMgda-R=8Y*]@6BM7,j_uNU6#c2V)\#(t)`.W3Uuc9aYR(URVGW$g.M2P$4Xpli,7V-;
%Vee"CNkQ!S,P+(S+3.l7C-WSJ%ihLi4hiEW7Gle'ab>ga9g)9`K`mbsY#9!mAqKXf#Z?(TP<Eg<Pj8BBfd?:\]OC'.6$YM^`cl96
%CGH.Vd,>s#27UB<LIU6Tf*8BuFec4X0.-Q$FI!!n.uPJ1iF2G1@42X*L-H^fr<@.HFgW^:0P8*=Nm;'SiL:Q=Y/@-;ohP6H$t,j)
%<Z<WO>ZQ\>`kg1p$Nk!:WJSR3aT+1O%%OskFj3==&%?MBYn^u91"\J+3j0lK$UY^CY-&HJ>Y_jCW>C:ZogiZJfnTKH19&K!`Z3cO
%$[rPHEadm&cG60o@.=cYGea@#U?,*CR5hWYdBK"9oE5t`Bh=ijU_@EVI?e0W=!bC'5QrNr)4b_PH<I%0X)+UE3:1BReq],\"+#40
%X2nARVH7p:f[)=mHqmKe6+Pd8!^9dDpE11CG\R3m('[rqZD$"KFmuUuRT$/-e:R=GRi9YiflLL!XgQIogeKV45=B)@IL&g[0Z0J[
%;@cGRD?dn\S^Hj1GTH]b5pXW_;CO_L\ACm8)"%b`Eo@s+PK_H5=eL7<\S.&gftq!,aG,Z\0D"imUGMUlCmUFAiGhID8dL#R9BbaZ
%\;6(hhspV14#.-Fh2TJ^U$WX/6NC16k/g,e$-%Bh3HmVL9IA41Dr`rSe>-TLpG;T]##Wg-Q!@$s:b0]opd>8hD1kM(dc:mO&:iu+
%BYtY/MZA/*Hr(1(9a8iCT0rhu;D5)GNp27?:eG*D,j$!;@_H:;V'iF1$SA=EEiEb*[p?:M:lVIf]df*6,FH!ilhBUc6(Fr1VTdUq
%C>^*cog@gZ\EeCnO`<(qLVAc4-7H;-IZU;7N7P[%Y&AqQg!j_P8]CrT*ggW*Ld<M.LJeVC_oU`?/="fi:Wp(Mb$]P\9nleu:[KWa
%l"6-cN/!a'[b7S@d_5sli-HXhLC6!<4WA%A^sS@K1250XmDqcF$9ud/FQ[<^!!IV*jDge@&sGXVBd#MIL608S;UCNT+CW%be,C32
%r%?NR#u^dTpWNfLPhY+gV'`.E5(p?-d":]GCf%j&Nut)AUpL.OnKm=MWrZf=8KnV8)`Y/>9G&B@>PL*7BrfIi--u``q>+Js//9$a
%R&hG9fqEh2C3QBScG)fZ!;=_Rg66Tn?#lnjY^bRi6/rGG8+kY1gBdWXQml8n%iYr70CFOhJHoZb2@N[_^mLo\9*`*p"cYde>d0\U
%HEAe)Vi6`j_aDa^e6@r[[ac-`0YO8p0GL\5'[\5%%M[^iUduQI/NM1FCCC*@B5&(a.d(?XJLYYD$$/A2V5:Xu6En=`jJpmgc2'ac
%/"p%g=8`5`_mFI*)<?Z#0O6si8J6)Yn8.^!7:Q<;q(=:$j'W.mc,$4_F>@-UX%:)-bYiW8`MlMb8Q!9j6,ShjYjXsm\?(<.b17`P
%pXBBoTR"]B"4]k;A'cT]73mX;'(\9BWe9M&mfH1-VP"/oVFZf52oO[Kb-";/>$Y=O=U1Jp=m$#Oc7Q1['l=MW%Aug\:]M?pi!*Xl
%bliS8;4H(VA)'q%\"mZDNSC%b_h:PVJ_QEV<Z-\@<MWa20'.&c$d-<!9-,lg'XE?7KaI']pb>%g2ZK,ND,Z;3A^XFT0Go`UH8\3c
%3'Jb2!M[8AIJY>jL1Dr"XUYn[."lY@2FJ2raVfc46&IZhOX(c:9sQ`;U:6DO!-3gUgnTJ<Ej[eZ8#qX-[bg?[h%iKPb,F@?CX5o2
%BIR:-q^D\_5,1gTW+1j,NSkuBePc*k;j&o2?,]?t@)\AgafQ_L/WAbe=pZK!qY[9#[-`W>&m7J2YaEfsmREA;'b]%7WE$n1<DOke
%\SO]tN^aqB8SKm$k-Y")FP4PlMHk\pkbpde;+b@NCc10Z1o1l=&9+5JG[U(uD)'6K#5bQ^8=sFrNE!pK\B$h,fuSl=T\S^Ff,@Q;
%C)-<!gK'F>hB,ZAOK0LeD6''5Z::b"T\e3J1INpO?6K18<J6;70i*iEhpotDKNS1&pqULO#o_2(PMH?KTFP&*.W5hT*COOHQ!?=#
%BNM%qZ*2aBYop'^!,f!2a_1rbnB>A)PCP6P=$dF\lR8)/R:Vt5VO55,5^YlFY(Q^0;^Bs=28ECkehm[g7dBaQY%*U.5U@++j%-4P
%TeVT@Qe3!ub1c%J*/1"]TrlMk6FR<iYn@Le.G%#&N9`s8qR2\S36t3+Y,'#pPaKMA%.E5"`+XaLaZV$NBL]uD3L.H;UM2`A`h[<P
%RkUpA,TG6)%uD>Q0Fo?G&R-,.bYnm,,`XDI.3@HB5D[Ucm22#MG]8UgqH\YI+!Ib%BbKNAY`NehAgQb"/(>UOoR]55'a-KPXAN5E
%Q.p(E'>.BWF,Aq9-<G@,D(YHZ>71]>U/Oao!Zu.2g-p1\V]Z=U2Z56.XC7$?O)RfB*5Y6JP8n[mWDQam(_Fn8<9cCo9=`:Ii>sU!
%i2j>"(Cq:'#s`KcV/h[.$LkErnX+o.>Y+$MeppF\ohGjfg[/Qq`*dm,(lS0G@hbo=1lbLZCrT?Y_nT&9Nu:\5VN_9o0NU'qgX1\\
%*3$sbS1Zs-V9l-+\8=eh)<DK?9W(6jE_9"k.1Q1:^lrEsLl<c)L('=?SWobF.g/MCg9<\Vh'7%+jn7?$"Atlabf?16*l/OGjn$bK
%O'(>'.GPT&.;0#\@A^r=m]GS1&S?UrqjQea$NqWEY"lLN!1Kfk=;O:5o<+js<IiW./6r*>1ZnK/S05j_&,"4KC2IHg(SM6"R`Ml.
%!A\flI&:3E5&NlLVWZV,l'!hQO=)&#;&;2LUZiYiWYI\(-GHP2d.^E.#Yo,!$Hh%A*Fi4%Q=lYe9Id[CBgJCY0MUN[rF(Lk`[:RP
%%Q:=8OrP4nOfk.s!-^O]8Bd&u!GUec_nqZd@`%fF%"0an%/[OTO];s#\NDD9BHjT`HM0Z=bW&+aB=S5['`2G?Lgi1%%l+T+$mr"E
%FD^.>,)CPY6.#H#eY,8O0a_piLTrYLYAH<!edGn+]mA4^k;XA8*8==9=.&u53-e61QBmN,qMWqN9J0p`mH&H.5l)8fUd*-iR\6"H
%d%[85&6%oTRc(n?M?W+a@(2,6m4gCfN4[JNqMsYS$ZE*0O:*(E4*9Zn`Sj31cgsic!.E6oQg#KO'Y^QkVl1+u=h5h?ErD[uBhXL2
%I.aLCl9QK,+%cuMp=d@$_oIch^%d4OVF5W/#]7\GHUetr8>nMjEbt,?#kXO@jDmu#0W<T.=`3;H\l+Tc8%-XX[4G\(j,WW9pW-q/
%?0OH+34G2'#gU-W.62]U7.P_2S`AAMB_jdCj-+&Jg0EYf1"q"rQ.lnG$'8Xg3R2<l^2]_rFDT38\up4J"fAk&XIegI+Yf2225A)5
%Lc;=_D5IQ\EgTa?:P#$'.;E3_LM7jbk0,PI_PO<hCke?a)?@/f:UXE+0la%nK/"u1f#`SI3\mu]Y/`=*jBrbf3RQ%=[H!+c+q?(W
%el9,+h$YBJ$q-;sKFb6GH8Hrk.31Ts^/X.7,r_5Tab:U.csoG>pkb/)Xr^BZFWCp+Ak6am1U!fgqrm9`XsU&V><3.Ck(L>.Ga]g.
%))Vb,dK-14P=?1k9g9bt:lY0'4(9mP@W32L"MunaC`VjJcmgi=[VNN[n54"=K!`j!"%RObosB-T(^q;>8F:dj[GnW8U:>.>4"dmi
%,FCJ]&+t.@6=FIM1ud^YQJ2U><-lk+Q<+"1=BaL]-J4XRPo+UD#5g0IX2JZnY;[Ai%p?3+nD`VRCTr9Vk(`<SNSdi=_AuldV:+k;
%#$9!@da@BE^4V>qQmBTb44i)@GH`-].[&aV31W9RV-]:NGj)q%Gl[K4R7+6@S$W6""X#O.:_?$.NH_$@;:^@SRbOKINWD(G=Y`Sg
%Bc*%YoU4RT5$/_%KLOgR-Z>e`/E#ag,K]V#Am'.l??J609*2`\A#b%*4]50_TZ%I.U9uA`c@O9Y==SJKqB0ruoLR@G"-V\99nFu`
%:N0fr6Tm^J-CO+(g[#Y@.LnY*Cd0,km1afEKLZ4\>>Y--P`X8OJBm)A'T#_a(`f.GQCf'<h'lGFTm\Ii&$;ajcleT(kDWpoe2Z0B
%UU.7r&i@*'d5"ieiTi;jOqs1fb"9f'OFCog`%+DUZ']1*Mf&AN3_pD8[Kn8.R;kr$^>f]$\'=q%Fk]mD@?sN6j#)`mWLMh;;)_]-
%FmG7XF=`EEoXW(N>?^!)X+G,Mc85g&&'SDjGkR`W#LA8)1<VSmpQac4lRV$fG`h0I$R`)"Op;SV&\d]PklV@k9)?Cpm?Epid,csh
%nH#KTg<(F&#@;0Um@#d[Ja!63J4m"a5^A\EI(`p>gJr>$NP\c;6&:DU%4'o2N'52\6E,U8e.<:U[^u,9W.ki<K]/sid#+bCdfC4.
%WSAp0+-Tm>=ga@oQt884`.P65B3[@576jF+K(YplN^tt,?*sor2A#(DXk&ac\Oa8cIaS.oV%K5XN6YEaGl#id`tOQ75QG(SRZ4[E
%==VDR%\YS2lcS\7blrQ,-c'Tm("M8"ot]aQb4ii#;2:7o.?S],?/V/qD-nm0?mm0t6#!l5+uX>gV06-uJsa.#q(RXq-9_;[o3J2/
%T_GlILqa.uHa@K4\5/6igRr!GF>b6:ZLlf&Y+p4Q.\-kk&*FLeoO\fQ_CcM[ku[sbH3iUfg-k"0_T>l>M!^XT3?In@n#GdA=<Su[
%Z(0a`<Cr*;W/V9mZ%[T>%Zd(O\7UB(>):D1NPmBM!.E)Jm*\FkotXR#VNu[nImLUNTK7<\Qu^,E/1pq*4N/*ZSXH0rWn7`:L(tY'
%0<='=*&YTH+h7*f4CKXuhPgKCQatgoF>6*)W)_H!+loU;GTZ7ubut];@U`C'mTI&9LK!&-""Z.MEDcnK^"K4oKG89J$+tXAR[.?M
%=c$eSO9DR4'aY;L<$WJni_ln#c"M-_`H*_`<XNGA\sQ!WKX"OBc$/[$UPY96BGK6TJT0.IEZMDHk[1rjUq@X/Uh&6hb`Jm-1=.L/
%7tRCLEf^FT_G1Qup1DoGY^Vke6k3J83.h'L[4LZP[',3PkTBms_GVjrX3@Al)gXq0k9'uZ4r&$HlZpa^9lV.[bJlD$LU^jN[+%6W
%\2VAcljM"<r8X9FR?hK/JOmmEY+i'oqR4g[8",tO2D%1!jn34%7rX9[eGC,2oL-qdf=;B!hUg/?oVM7DKXM%"Et$%SR6Y-m6Lu=I
%%:?t]RXNf*<')7l*[8eUlPis"3bV;n5_Q%=[AD_8iOH=bWt+msLc`J7k(AKN!*Z<KNa@[1fI'[)+1F2@3$S#.YGr[C9%jCSWA57!
%8QR>>*RE:^^]7q_4kh`T2VU5;mSP`3B9?hZ]7@:q1>9`C'MFX+9Z%dDlkr)[S(ou`CEC>@X/0$3H@39Vh1`O`4?](KeMbl2aXW<L
%AH8nm]/5--Jo>Arin-ii*RVP]C-6mg^?l1hbGB0bX"->m"h*_e,N;pL<Z.jkd_7>4Ru\.de[klm03t,V`h9*?QQ##%[9$\4Y_@g5
%n@r7/*AbB=gfQbe,@<jnb/ag?%Rq,UVG2hIq7YGrP-3.JpAjJ?8gPO1<YN]n*S2bm_mDpdkLHql/M(*Cg[.D&K.T3&X;EP(!D2ST
%0=]>kX6P)'XN!Fsj21sSC4iQFqd;7sV7),KP+NS7pd-q*7/jqT]*6SO3k/RR+cA1O!3NJ("5(<?2%o8F:)i,;[k[+K',95H6^iMF
%(><DA0k!["a1.638A='+Tu2`J1jZ;G:2)h?.ELC5haV?FddbSoPi+6u,[Qk2!\`YfEkK.Ua(!K0$h:nan(Khk,F"%Yl5XNn4Nc2[
%@J=@M8Pl@W'u_UU3+b-EPiL2t&W0R,7V+Db*A\fJQY%q^YY9S#$b]N"g%n_<?*ka(Wi(Ig48`cp99!a][AF"5?-ZKS@dkgh+\+3`
%OVg2$*_FIQmXq!X0P*2HY^3YA,KQe>M$e6gA)\UnhdPgfc,W[-4Hqm1j@i'\d^;bhcaP+rEboWl.Ybf6P&2CaN$\kZ/C.iH>eOV`
%CU?eAcYYN]!.&cJ$^['UDmjFP]JIlN[HNTL>`)PPijq&;1/rCEgtqB!#n7O!nVrIi1US)%>VY2m'N1DD=*r.JG%=hu"0R[;qh?/T
%iu,&M<_b*7;c2WrSS[r*Xg2rHG%*gVBoH"=+XidZ,"!od<A\L"!t*!=aSInX8B5SL>e(K]g+.aYBd`"BG*=eHY,d!7<#[59-l]#g
%0iS^ON+PE)"m99@Cih2t(_OYs<_=-RFGm.oP]:<74g:N1gDhZ;.b1LB4RD($_bCG)TQ8iTL.Be)Wt+$;cf=^1n<sJ#fQC']$jo[p
%Y.=V]:t"0Z!\h/YH't35g3@.#SY>[0g#8Bki&2fB^uf_/Deq($C"$r40!!W.fchnd9GsO!F[2ZQ(^%chKZc1.R@S6[?!ZjGlWb.<
%#nj--Uhu;p_-X'.0LS$JW!MhrF7=>abbNg8KWfIrc_qYi;0j0DK*Vl%(C57G?68$-9Tp>!,Dn=\mZ&QUU=^<VCQbkr"<lHpTKq&l
%i[k:b[`9;T5SQJPc[8*$FC`:+arM$.Nu$]&"ZF7:l'rj5+:MjA`5BY3Q,B)XnC[Xc^5ZI+jVosR8%4TH$$?IT6PflDeZf]Xe8[I\
%Rg1kg6gP!*6C?AQC&3KXL,r;TE9Fm;9%**VM?If)d5^BFU1(3?;nXc:@L;Ml_/h]n-?$j;[IN*qUq(_h8($P%4#Lp92A"D_>PYm%
%o5Q"iU'V@621g*b\`uKfTLj3'&s,+TLEH'#,tuE*:#J>adTgm@R%f`7M&RH)MIBq"#7nW%A/B0kVj8k[@0V=]HR<Q5Dc0Fh*RPJP
%embAulDc+H?WSMc%#S_a*]_GmX4p]i6p,TW'T:t&eZL*;h_LHp+GGI7j&UCno?c<hJZ!!"%$+Xl#cOTakhBp(N,CXIPBM1#&u.YL
%<`GofGhE;`!NAk>%b;&P6n8MY"'S2b&#]&a_DAh;;@CB?l]j<aBOub90JLi`d)_:]M2mcr0f)3!\%]03D<Vq/F6G5>R[0OB9gPKV
%RcAIa82dW&CoW>+443@&,988VF['m'U9,fDD4AWK%[_+q[BEBlim\StYAs;h&=Q)#kE4nI2:i^_H"O(!guDq5$-VR:I"<ej=q@#^
%Jr;Hnbh"]@22$MabOl<I;G.91Pb_/5#Hs;t0kKYX6c13ph7Cf&$qARe[1r\hTa;i=P/UG=WJB-CUn_ru#S8!cLie0"PE9#e@@Dse
%DFfuf(0/:094_[k/A2>fKG$"5n-F;Z6#mMTO"`1%D0G]`5*"!6hk,]$W6gN6S5E=UCkkMb"FX!UR!M8kTM*BD?A!tJQ%L*Bl@NFg
%0pSk0ZK6.7P<DUeE"<HbfS5(NJkOms/BupIWf.0R%XNe:[N]4mNoRMj/jV_MkY*FU+F'oHcnku4&lK>f/*Z"EC``GJ7&/L/M.R(,
%m09a7Tago.Y@ch)r(O:U\,\';fu>O7O=$dk]S1D:>IW.3+.ub]OB=M"*$YfG-3KD7IaNgI.ZG;a*cpCeMHg/nQt=c4rAM6*NZgJ(
%Y7&9k"OG[FJ_h<."N$"iftMpiV%)itP9o@O3M&g.L)UY?*KjA7JB#j>P`(T5(YoWcm%iN8,@,KH;%=jsZu/G\E3PRXU=?fY6r$R8
%6=ZDF=!R(1/1IK]TcRMF(LYLd3Nckj/dA:7^iU@nd_P`*PD=KM*+*HL-e51(e.,)T+Bd^>ip1].65@I*7s@>[k@(a/ib:9Xb(Jsd
%:8TJ_0e(+*N(\9Md4N5_nAlVX\ohHL2tbPappTTQAkd6EJC.eoADpDsdQBQm8g@kf[0qr7b.Q-0M;SG5;/,e;l=tnOo5s&B":0_;
%fDuV_%$EI&\b_L=6o@;MDui=gHsqb\Y#:p?M.^L6P9Q/QUM@=.DQ26umi.g<E74f%Kqt7hUjKIGP$[<t0*+dO8_?d`=PZ$WZS!\q
%:]#!"bJ@k,Xhlc!f1H:/*1ApKANOKjTRrk0qm7uR&-I,`lKRBXEDYp7*Rd<C/IgLoY"P3-FSnPKKtG`KK#qO_(V"f1@O+&KjD1lJ
%Ql%>qb\%fL-<6Ltj3`BP;&?^0EBGbI5"UA`E7jZ&%,dO-MT3#oV/oZQe#iLlOFZBbA3/tNBXe)0e*/dJbWD\_^i8*"6eMsGd@=O`
%oXiUO$p8Eg8<W;D`-k(#fP(_-1s8!dB]QNZ=CF8I%"a=U:4%uN%&KFZKJ\+dI>%iHm4ml7DFW`0b9><t?jt'brg]Bs[ZJ@bS8G5s
%8f*=>?OsG?6S++''W3TUWF"T7+Pa5]ctR&tOaRE5kU_lJn;_8UUIg;BfYcsK;;0>s#s?[4*tK86N`hpm\V"<-jd1*M>k(_0:)Q,B
%$kD7a(fd?^@B$)HFf&IU"jhZ[*$%+N5:h3Lq`XN)BpG?;ilI>L^RZ.jpe)J7nfaCkg)[I#Ne/k:d71:1g4nY:TPKd"Zu.:VE53TX
%;b)bTl5Eg2_m]+C0`at&Mda+^,hH$Dc8_s"W"2DWD@\[H!Gk5hMKU<)c6l@9?q$5n%k(#s\'26A>]6IT*XS]k=8_%[*`bV6B6fA+
%O4#;rI8NWOFN^=qC`/=gV.(,9jFcuO**T87Dp/J^mYf$NeXiX`gpBh/V7o)[p.AI^cOsL30Ir+u'7>9sZ<_lK^.4<;VK1J7K>u;O
%bd?bG"O0(K1"b$)Pa8SLQu>r2ZD$aD+Pn;:GimaI$kL`!NN)o%kRhMV^r%9pIBgtjV+iH(d_9M.[#s=h)"-?tPB,\HgdeAk%_d`q
%+*td4&gl\%jseYCTh1$nVGGVPa\au*dG+;u0TlSl#WYeJ<6*rg2l)Fcmcdq$(i9c1:lj9cKm0It_SU3sGdp;GUdM%Vd*Q1L5$.%8
%.i?\tpZ]S71]\T54"+k0BTs:R0\PC3\fLGU=3.mg8%t%bF9@k70Xa>MSZA5+EK-'-jf>_(7!9=aKaBZgeZ\31$&Vmd2aQt5-t<X>
%d#Q41h!0l[nWG^e-kV3?=^Q'#M*l].21_kd([Q27%X7S6o:cV83IZs<dl6a^kh9:se30I&[4Q;F!n*?,&n!7CpCRN\S.'!qd0DA!
%*rJ&<$RaQ`3'Ifg$p_O1X/7#ZiP0s-IGlVaQ`'ZQ0Z6d3`LE/ETt-;1rWmY2\K\Uo'mIK:3W/0;=)+cA.Ceq!Yu6=7q)CU7ap<80
%D.$ZQ&]OLhXh`^lhsDOAk@VX9-]d*'A#SO4L.Ob,q0"\>BpeJ%CLdO0T5)GkV!04C73S+t06Y>SrUbNs"CGm^A(T*8+j%2%2mg13
%Bh[a!kmlDQ/9p@,@Qs3@7@MU!(I2h'!740O`>DC<[tXO>/YVST_-sZUf>R/l;38^rU4aM6^"Q+fOsc2aC1/0T+tBS0#$]n&5_4s_
%))p/VVX(am,k?$tHjf'"A+iVW6?H*-7;c8"M8hYJ6m3b-&)9.o0#a`k>2%QT$!on`p61uYLMK-jP6*KHR9dDK%LoYhd3+u`nqk@;
%@<)^^9>q`ZWVgH<2h+[j=(U3uL$(ccos,'Zn^]M44"o><,n%$JR%k'Ne8L:.a8(9lZsE&0JE]@`:`)0A7buoOn\EBkhSkL]\ta>$
%Y3p-qOh"H5F%Ia)1&le7O\.fI*lb*Kb,0N#Q*kdPFlEV)?KZJub^H8LcZFk#D(1%pi,sh19Iri?%aaTSXr/WAm5Doh(AEg_iSeYd
%UsUAAq(n>7VhU+20<)<A\j#cJ#7U@&A)&5o1`!tq=2>;9;[DtU?N.$b\;qF?3BGC83FSRX$3=_>`K#^5*T*eRZ^"JKd8_Me]6lNc
%(^8cg6S9I%=`eqaAOkuCFnUkK'GQq%_g/(WcZk\.r&Cjn0VB^:?,t/]?cC*$pU[2_<*rVnlJ"l:&l]c!')1Nr/\"hCQV"UCJ%q-s
%2&T>[E=OEF3nQ,.PagVl3b96.cms(2Xraa0.];(!qZ47MP2a_rC/"tP-hI[+-&PT8)WR(ZUeg)#)C>R9d!9A!*YL'KT&@e@[*U"9
%lQE@7q.MdR^'ZtCUSSH2#OUe3?(38l:@N8jSk/Xe@/R/_-XBbJ20\Q"NFs/BqST0MSRcd+BdL^E"JH1J&>>g>T[E^57dOkE$U<O%
%#Z"T-?b*7?,M=qJiE9njiK^gZ_'FuKeKP(ePL8ch\0k90=5_]2EE$q`=Lp`,WiLa\S:GqE#;=??1SQjSKe:LhU>Y50KFuX24p'T^
%Xfp+0F;(C+*X!M\[OIL"FfnfT0ruRfV*Z072dA"<,?a<>7H(2Ydn''N2:2T`*iE1S.NsP5\AN]6%E\sM-6$\)?;Q//:PVZS+,1Da
%G_HoC`nBOH%Q"akCuruN2@'CJ_G"<^"B++en5H`*_@"G<@G1`q^/3aAnZ#>PWsec[jB*al_]oEoI.1s-Vd^!;/X<nln<(?lr#2YR
%VRh[ikB'*Z-;osT-&jb8EFbrX%YnlGU6&QGQdm5kL:<<@'Km[8KlQBa"nf%fe[q4$_S&;`R/6jMI7^W5gMu')JH#^!RM^:hm[IWO
%3'[HFc6+$9,RDVH&qI=u3E"dbT5QTpc["Rp07!#_XV]^nXK1@V]%tl=B%8APfle.il"\m,W9l'?n,;KoIPR;e?$bZQ,:H@erL;^C
%ktD'F$T^lZn8,4[b?q'3XrG#E1[,'LTUTnQQY7bV<%lWpfC^fG:q4?"F;/W^+t\Kf]LYi_'>@=Bl"SJq<LE7lBIiPIkNXR'rd9^%
%l^t;cIe10Qe69W_*Fg"3g?0@R42M!U)`N65\NU(Y9A-ao`fBn/;`i0tfuPWY"nP6L6U8M%ApW)I8MNgO`q0l*_oau%Y=?m`@!Yp1
%=K6I)d!.&kmg<./+%(PP)6Vc&7uDaF-T7*36_;3P?*<`&V,rYX:gtL^3im.::2Q\YcBa?YD@;jWhDhdGD0<*=a@Z1Zh5@K!M4^g(
%..l-6+Y,/5'3X`b*]0@MXO\M=Ta=mFGSunp@nL#QK7Mm-eIa8*SXGH&+JFd"H\!CG=a(Jse2O_SeUn8_8pCjNhn]dc@c1??ap`2$
%a<7aa6&WpaP0VZii:K:l"SKIFPU1;4;Pm=ObXP>J!Rd+D%dFl@T%=^[FobUHI!9!o2G5fG37)pm0<T$9YIWDJ+iE>\31rdfFW_&9
%ZOJ1U_teooS/DbQ.3_$&A9mgH]=eaU#kNH;E9&&l]7Ak\)JWhQbFsXlHL?XC,MZ3"m";-7FMM^#A$Qm9Vn;6?:Y@pug/$TG#Q3&/
%qNRLPmU0a%nU[/A0)@!ngJK5>ktrLbH.D/3>cp.\BU1_',:Tfr#]RFP&G-KdCYHkF+#(']6C?2?J.$dY/>7+O!6gG*Ql5u3fIOb"
%"X8d3+\f8<XAD1-h@"@ioUM**5SG#:ocWn_`B`B2"ISC_)JZ[)22EQ4X[=`^:tT$r(-n:&1LVH\KJ+;i7Gig1Ou'ZY>b'?1_PM3o
%*%,T:*<(kY56b/Qp_$J@`Br#K#cJS:=!SdL@1WolA45,*oJ6c6=J9n=Po,fcQcaC)N[!c8c_p[='4LV'52Yegm#RL"9W.&,Yj;.P
%/@"O3QRsuJi$HPTf=u!m@/sW@e7:a-GHj/Zo%`@#[<0K6YI6-<AmJgM4Wj3RB]-u*56,kJZXsuBkqE)k!pRoQ\rCFW`!E+0V/&o\
%[Q7/`J<jCjU(,C+aEB]S.k_eTR&V,6Ggq&bo_9`VAqTB)(&pk@=sEt`G7;kkcG<2Ep]fkiIq58N`\O,(l'e`QjkfrdMN9V]Yi\&W
%"us)TahD>-0!g=D]/Bpdcan$JhN`6)K%(g&nh4N]VD_,#@P9+!W^Z-QS<)"L2_B2L@FU[MebVk#c^5ah\M`P9hUmtXdm;KXN,*F<
%Tp$n$.6ilR:Xu/l;J.u@SL,I(\=-R%mqbPD2*u0(fEmIa"HaS$4#Y;f9*S/:G&<TBgj$]Z??+T:SV2#?4*h(7>@JoD_=(`LeFm$^
%2-YCoaL(T_2S?-MK-r8%hNXQ]/9rgeq<2SLM=*PEFeR)i,_o53TC.o@69?%b]5K<,^PaAP6LQ7)cqSC1r!CkH)8EJ$MQ2W$e@q/U
%N4Pd[UC;If"=*Z&1#.DKIMPt7#j.r,--IuJe,]fbS4r]uFT?5q-;NJ%lu?Q,q`T8W\#8ciYQ$t]C;Kk=m"=!X5[mCQ_Y'eIos*]d
%)*q/51n)95n-qP/j+H9,WW1;biT&s<q!bS/GlOQ$luf)(ruN(Ws+U*F]BbOVb>si\/71Ign1sI@oA5#":Eto4EOAGu,*'T\j&S>2
%:Fu4\W<n*em10m.)lXI3Yt"]7*!)Pd-0fXjDroMRJPJUDk2"R%L3[cAb<qU,=X$:n`%\UOqFr>6M'*Ds,pd(0,.(Vp,p7R=Ug^XQ
%2Xm<o2]UkDH\oWRh.I=h5b3UE[0gTjCpA*>&OE/UX<O&('_k@#%?_!E2"W:!B^H)SVh=tZ$DaQH^,ZVkV3JuXNm/4X5`d7:g9)TR
%;=[TDAKX]:/$4?l\X'INNaPb,Xk7CA0):"tLJ[jrZHK3ATWB2;;gOrOojufYG'&9Y>V9>M,\dU?do+\[AM>VI7?_f&IcUG<>`d\_
%AjG^A!@$F/X_G`!M;r[T#%_jkjtI4=YrUfoTU"+9E?YR3#_^`ZpFG2.lk(QrHau&<\W!sV[%'XBC6DG^_KnU@hRH9fD,osjIj;Q`
%B7s>A-UF[:!,D+2:EFYL#Zn/h`46Z"f=')9N+l<9VO(YF_96kBg73J4G.B,7c;UA?Orit+-9.1'h,B?WHW_L5CBtR.<f9!(`1T@r
%>PtXaEYhSiB6F_40#Oh)MX6ZN:(4#OMn,JDBc3q/RSKSM@/G[["Se?XjN,_Z6<I86d9AcnhDiO=C/X*Wh,ssbN79sSMkCLR#]&da
%>.W-4D5=+L]sa]=Xu<2/j]_Q2.HRg$9T#T3;R%5\G9OUK>`4bGW&BT\;GuQ;W8kMV#:J0dMXo\+[Ue&?6Bl>PEA769HSV!%>1DRg
%F?@>T;oKZMqi+F#QB#j$e%7i$8"N^#IaWAkbYFrE'Yd['9">odJ2ib9KGo$8V&-Pn+hh`(%``\j$Mf=cN:@-uOUd[M>R/+(+K<t'
%UoN^[qi`<Lh%uDZ1Y#E/&p'P<?jU!$o[l6G?/6u[]28ZX^#Eb@`0V]%D""dmihlk]U!aRVP[pE$)6RbT[d;YY_T,K8;Fi3OP2eV5
%MoV`fgjDsR#fL,jZ&?:pF9YlVfbi/HT!h$"ee&fQc#Yn]H?\4b6:"=DO]G-'#`u0.*9UU+Lf_h&D:T<=ZZCeu\N[;/_A-C:JH#m2
%[k]*7A?Cu]`;^][rop][]"ioa`fTnn9]%hd5!"SMEbtV1P-Zj]d1m.cFPtq%A@\J2(Fh8&LtU:h>i&B<-l]e?<?G]j73+Jk87*Zu
%5#>Ag_hMEWkL<]tW<DBf3hb#DpKjAkoP`o7DV@g1qg4u\LTklmI/-^iEnMVLIreF/&YD6K/XL7.N9g.NZ(+GATa>uY!N9lkX"t"r
%)c:i]7Yo0M<7EdRa0`pC6da7@#M)NEG.=n=$8-\2pi&6@".O:<.MTpm&`&jFc/]db"&13o]]Y6;NSR\NWp)8;F8'k,;C,)H7BF?O
%BH_i92:JL>p[8sc5#m4\TahI0WmkY:L8.fT3k&*"%eXluU3&2+qai<W#L*u\ougj*n+l(TIs"Tg3I'eDk>kH.>IDuUenV0K]deX?
%i=+Lr#mEfCR<Hdf<@O_r^'$_E_kI?ZLa"E$a@]R1\=2[adR40Mq+-o/$(<U_"9Yicp+0`)N+o*K8Zj@Z+TuCdWV<p81t=NH=NJNN
%KQg*5>l7>V`c5tL2<3M>ZAGehb41>OK\rf?UN"nLaYI!Y6@AD'\)fM/CED6-MA&C%Ct#ge3DXP`^Y2f[Z^(^K#]]8JB6<[:djt$?
%T8d)6hg>)RC+[Rt;6jA8e8Q#7RY8p"2;3^K\^V[EK]7kTlRU"OD&@gNF),@&qTK""ZsC7SA(Q@+hD$-lJ5phsP:%1.gq\mMoi/RX
%!6(BcBVTfN-lt`0n$^sGBd\jre[4MuaTYqb(1gYS&GM@\dnK$db%fNKP=j7H@NCS.SRb!]1_o/pX8CY&?bshe_Q(9$&<4D04dG!!
%=O0ImpA&E09t-X/q^5O)MH,IV%^CU(LhtE4.6Fq8[QPO/m[V&)[3"=lS&W.[Q:*<M'$)@FDd>&;h(SoDHI<2Zhgu]@i@,sr>h2B.
%JXmS!X]I'A=[L-^KM1<fDogM2P3l81Co>0P!%^]HSkLe6r/GA^A.jJTcGu`01ZPAE+:o?dRY^W/+ffZ4Ct!/[hd,%XI_$JaLMb^d
%8F7tpe9sgJ3b(t8H$m(Y]T*O\YT5pu$l)W:AB5FRr6CW;n?X(:@kFmOCL$%eakiLg0Z]Sce<.o)#bd*2q)(]25I/7^KKM*;6<)EU
%f$4f:o3[lh.3TbMBc%I">,E3LE#?f:=\gYd8#\]*gaI'5_Lm!^@b_asc:qFKa_F:!6+t5A$3hq1Qr9EoimRJ9ZddWhBO;dVi@La]
%@qstuiL,j1W8UaVcBM+bZ`fjF@)9@ch!_Jao6'[_f!:tqcm^/pi77Y`EdhD54tujlH%<I)J>>Wuc?88Ua!=i@HS?@#j,040nQ;Mq
%`e#bRnGr;TG6,p"94JGXb+K;/fGHAN$o%)bEjtab%MY+t6X7ckopa%_K0ii%As;N62Sm0jc6GT]DC#HLeIcS#&ZCQ[%6KkAg((i"
%&)kEYD1OQ`1ts-"cRNJ%ck&kiRI$nPBjWn\2gLD"]kaa)FL<;gY_\erD30+(W(e-Q.sG]-(]$DP<+aABOmuBDaeDJJfoYS]O(UP4
%*o>ClSo1fp>M&YDaf/QWU!=cbHek^!McTsRMpgrY9="]H30WXmlLr#eoIo!7S9"UNFH#IA>%TP$8iDK=*N0t%QF.<B2*fA1`0mMK
%&DZ.=)aIG?8ISZ\+1]VqH5W$!$cI9jOEbVMF8\Gl5J#]6>4#\SOr9_`4.,H4O_q$jp_'M"=(H3U`qEHQqYK+_VH;*]367jtH8jq!
%'&IK]N4J:?k0;\Xognl7['_q0(btf(kC.T\:5Ohm_r<8aL@U.n2D:"X$a-+<^%^BlB>'BSS8fZjO._#M1llJAm4>7kqbX2V)4eQ'
%2lC5(HTNf4$D?6O+?]B1b<.'dmGkGE(?)3&/u^;W+7#`TKjnR<oiODiGh4<'n5s:5<59*Hl?k5**VJo4-4Vb$Ej]oPfaY`U(7GIk
%SpcT=5KOT4qVYs8Pp\(Z%kCtW]6f.<7C0L$?l8Fp&R8rCnluWE]i.6'4PDeK*qUE?6V]dtN,"h*@U$iU=1Y]['C\hj2lE)%?S)<\
%I75I0]me&Pb&o?2(:$'gn^s2[q'E/Sp,[EXiiJU!cSrsI[il6VC\GNrkG;6@0E!UBq\V`mJ2Y0@cF`OB<-u(i<]SH$1R&US5p%79
%.mk==XRePS.nXfa@A$\d(K*/4fRMK[QUk4aS<QBa/#5Ni.QAk93/B#a)OtSc&=3c-[<;]:[jgE9)*ZF[aSPdo#Jm%Z\n*7[lT6U&
%,fSo5VXjPo*5(W$`"f1b-.SDA#bpXh@j#P[2E12L=demhP+jON!AQVm6'f,67<2$8>`Q%PPT#/F9?Eb4=LRV68Zj)d'0@C2M;5r!
%q,u1k%45l'TJR3-dAZ!XO]]:j/Tj11BS&1$(RM.MLbu$_Xt&rE?@^Z=f*=Z$G7#5^(#C;eCIe7K$Qf[p'2p(;(Qdh&Gl7nDX20D(
%Qe*oh=`iYCV^?4<Hn#OHN,e.GKHN!$VQGU5Le'i%XKsp.*$!R&k+n%RVGIM9*0q"g3m=P2A&\+ir:'+Xf@(.@FFcRQPJpk6,4D.]
%!RUad?N=0uBWo'u)Fdrs[BRE6h=_=Jqh;`JIsCDLeE&@9T=D^qFsq7tU-4AQ]P*X<2gF">`=6.X;g%mDp8U=7"hRc%pk&I%)n]S!
%H4`Agc[N;a^3A0mJO]XQ9mbMq1+G:.K)GPR73r+CMPq8Rn/nJOo<u\pXs[FP?>Qkhh(o8eiKEk&_J\[1+BF^9KG^DX$=$cC<s_,Y
%`Pp["nW^F%=!OBAQ%>EV/EBtLnC$=e"?pdLag6rQ3Q^njoUTf6AT@*&(=q4AM&O#\aK1dFEVZ=<]bBk.ISfKTdVjJ`pX7C.mWEdc
%39L$1"8*%s$ciMl.hV;C6k[X5&K],'J,Ze6&Bc[+;88q]&5i/K-bW>"OG'&HG&Pl%8^sGf'er?PHC+&TP$35i.[ah@19*0Y;So/o
%%6i$KN:/3:Kf[!"X0dn:L&-]^_SGBG+)SH7Z.UG&Zr!FkBRnr'KbM2%g%<Pf)jI!u)\+b)QiL>P9XMWDKg.h(!\8M:]4%%7i.n)?
%=N0Kil+#+([3'CjS@Xgt?)J*$<!!2u*RQ"c25HQ[N;^0ro>>BN50A-^cju0Yr`/su*)Y==p)Qk'T2?G+;;a4IA)9`mJ$a<q#Xi:g
%%EWuW^j4d*Z>&EX_aejB'Xna1lAOiH`ebt=&?W9.V5uL8bsc.u^-'ql*6!N1(P!2Cg65%M;@UrJF>N(i#@O-rqhCq7j+<i,[WP#o
%k?=#5m)Qq[afc258^l2ih-O:k.V2XNX"YI))VGq'L(icG_KDh@Y^i'#<-`jL1X.3-8LA"Gd#_(/>E7a,;kO=6qD-sOG`Zth8Hu;E
%CI*BaMT\^Q8nrc(OLkbf[*Euk1_42:/isRTpDp2cKME`+\/ab8ephs*7X(tUGreOa4ZR=I]mZH&f&uZ@K'F*fcq0rI`6=q,"SIhD
%Kn'_'INAhJQ\.aH=V3^Ya;":5CppC3DICu0g!t4Gc/PW4U==:-3gCg*]jhXTf_]V8i8G*Sn*R9&WaKfjoNFj3XXLO?Ycn_G>H(*P
%J-A%IABja:b_G9ohFe+4<qP`j,$5<dfbG(k/ELj!#EX'QK/pRi2Zf!J4gQLPAWrg]c'DnZ4)>Xe;t_gCYgGK5Yej[7L?M>>kQg!X
%fgnO!eS,M`\)KY`iWe$i"tR=Q6pU7HJ>b0N:$'nD)Dal-(5;qOjs6H&CQdX^C=ZE\e>E$UC:Cu#E\(088]=K:R`'DPCjFb*A[eTh
%#9S%'.rnS4W+.WQ0qA'\6,Sm[hXQH/H(A;XXIT?&7VNRd(!@A8o%1aDrg?r<?*)Im5D:Um-SHq6024;("[P8L9enn=s&XJ@7M,d1
%k$ioGruGb44:']`$6nY,:r9=l51tgjCF^ls!ndR705Q`PUg5;e]@8N8/fR0b&np]*;l?ZVga.S1LdmMg[4ImS\229_EN6WY0sKct
%je\i3cC\4HSL^6f\/g>IYW7(@EE=ItA7V7.0d>2(S<-Ff]VD`M35]>\Tiabo*`\McqAYo8$NL8)JYjgN^j*:/_3BK,DDp+4<M^IT
%i`ejt!%cpf7NDa9k8pmmBX34D33(mZ.rJYpIgKp-OL6Ms(4;cYAm@O.E9]!1S"2e"U.p32!%'XBOCfgpI(8Q:OG"R<%GF<KO[)rA
%mr?Ti7kkB)?\`k"HJXI5#M7]MU/Ig(IE-WQn"I3Af[)J=aDM?3_FZjt*QW@X1G!e.R[ib@Qg5:jUJ$eX7c$)e4>t@B"R(G?kNE;m
%L=0OQ=D51sLUMGLXL=hN>O3;@/?Lq'XllT=joH(7(CL<>'Irc6E8QH6psP6r.,c.d>8heor98rE0J#j+8Rn9!m`\#1fXZ=?I[LN+
%1jC^_Xec4kp`d2m*s5(!b]-PK0nMl,UH4h=e9Vr8(YrrlG4Y=0$Yf?Q_Q$-m09[a]8$pLkK33>K70,kOE>c%/CE2otahmK[$-f*B
%c.Yr=U"K_N;qW"=Mg3^Z<<a0r;UF`8kNoP_lg`Z/'tM626qS<;M!.0XXe839LqD%h1F4ca+s$3.I_mhEc(q"33(ES8:IaBNJOB-a
%iRGKH2.Y=Ok?'>]4!k>;D`oU$.q9T5:"5?ZbuAIGY0"-=lQo#F%LG%$*]/,SBj&Hujbm$tC":RfCPXoAN+Zhb<9`3@Y:<b0TG!@Q
%F.\ELMqlkX'8h/''..lJ$H9<l)ua63]rk<+4]*&`7CgNBDohI\&eNVlmQh_tQtY2H%$OeC:q]Dh@FrVr+:1r';iJPTk%33Hk(%7r
%qSh$BA4"okH"sV`<XP+C-9NbhR-YREV&ik_NYMiU$^mDF!CgfOnkr.@L1MgJ0U*4%=FZ/5Us4>sEMQ+^B0Nr,)M%M@8[$h$5+54"
%Af5)CER=Or9;E/UkHnK*LQ?In8379LV9="s(+Jr*@/R-JAo*tJfHnZ+j@&H1ajs?i4E.iPpXj_5eJM[n#k4K?Wdn^abMKdnJaX"a
%f6`RrhaL'97t^W-qSji0P=Ch>QJ9V1pW:=*VE;-oKM5;,_lFS<aHNn<&*5f-RD.*DA%39%0WtBk12*^36`>5\L6r6o27n*!MBq0S
%PN=cH:sEi[9N<2V;#%Ba93c<B1h\o70q%[(%`Z#\0b6F_[Zg7;m+j!(/nbl3X!,2%Cn3,j:CCTUQ[p.@S1l;@##@^h>$8212Qoho
%lY-+>Y"rkXkfuo&$'#Ubq;CU*LClp#=^`&^-HSfdX@?]Z#@%5/@Dg$\-/X8_Il0K2AaRqTSq<EL@nq#Y;(jq"O^g1I>#g)UQpZF_
%-oJO.D,uK5_koUbi:S;R?eJS!8+j_eN::2%SdGsOgfa'?I9cZ'Q6(P,q)(j>JIi4kTT"Llo/*8lX,`hr@Okp/HT@IofhN>I(2kX>
%g^gc^?#q,ET/Sk'c*J\85%0+9S1"o['fBtW'O!XgTrli_l`n$c$$6`<EP6bR,?1=LW.54AkE5kJ*FW-u4e%ZIj.$i"g^;tPFQ;+>
%q0S=Ud6Pa7='RrFAE-jSXG!=?UOp(KeLle!W9J7dpZET0#:sf,4.9sff#_X4Qc*e);r3G%mBJ6hXl6o$ZcmqV&*77/d^\"oc#K(t
%MX!P;NNl\NhTN>%6<mC,8(lCp6UU%Rr$6ShaK4i![E%6U-tiUG0n:[QlEV5$;,G*IJ<qB@(cXug:*`Gi[K4,QHVK@<@Td[j.pMm/
%2Cg:tFgc2qE>]7=<NX,2[W[>D>)g_WAWapm9.;tsE16E_!.g9SKf4b/M6`tf.Fq0Mb+!aaL``UJ'7)/:]1`B38?qmNOTKd`kQ2:K
%3eQS%RR3NFlKY(fP@AYT6'Rc(bKn;;Um"qd\gp:a.^sq]38.I:N)c:iIS)/3<dZ($kRQHBn\UsDT#0]"L-ac)gX6?4F&.b1!7C3l
%h]'KB=3>dTHV&(^/mYj::.oIiY@_oIJ$F/L-X!7`A58h..`=DQnER)e0m\Z<4MZu[Sl63,E?8Tmq='3ddM;TEj`I#+Fd35p(?(82
%k\hnjABmoL%Q]#aq$FmMD52LsI>XTHI:Os.c:+o1"E=cPOYC5`()!Wf7kEp[CG::%BiP]E'l%43R(ppW]\#,Uo!8)7/m"Wc7M#ka
%fJZtQC-*gMU=2saOoXB3S"t8i>81MtVXI+<O*p7*$?R+Rc<,/!m99!S&l7H^`J0iMUps#uo0ckj:Vu_P*Un_FOALQ+c(-1gX_e"A
%HA5(TK8-mF;gjn?jrCrc'o%$;%N)'D=24l-h\k+j9U[>,CpdX",6pE%X$ioD;/-,)CXmJ?N#JT2mW=J@%6Plkro%S1mRH1W8gK=C
%^I'`24c7sJ&gtV"bk_<Rm:-QeW[3Tj00N(M\K+=0W-95.<2M0&Y?Wn@[-q>17Cf8=T(MW)MPb`[G4ZC,eX[_$Hk+E$X%+tp1\+T4
%XSV4l8g>u/J!o-%[2#(L67gVaic%H#kHjf%46Jt?iWaP4>*0P@[=9>L;k6"@_lC[4D%3acs&()`*cX;3J?e<8+h6-@eG;/TJA`aT
%,l>(dGr>alg_>D.4OV>=S\Dh'AUR/Va"9S]2[,0YGsu^`DX@RBJuk16%o%&@Ae,L)+n,XDABZ)akhL'@\YhJtqjWK'CY<Pc10q]>
%Cdk?_=k%C8h)J[<hF)S('M@lr$qLJK&4!=?YVg5!>W6a%BA?X>NlG>46"*41h?7Wa4=kfr`?.Xh#`o./5SasqC(8s0&?$ip1)i"a
%IUQKob^!<AfEEo1D^ZM"!0aWsZNR#W5fmo+JYE.ZGRKgKF:WH2\4(hu!u3&uj%h=C89@HM3@heuccSb7X8?SlW_LUBfZ_0\!5J)S
%fO;kA@42_Ub:[=,_5oa4;Rse.lT&gOM5J?]'pjR6gX._[`k/QJ-ucE2;61%"!ISXq$`;jE#PD-K5WRN9J]n7,ZSMh$?Y:Ik#K-**
%)qneM:OMN#[e'%QlQ<iXr:/N[SH30O?8)V9TKRc?KYi*84?V0Ol[,KP&7h+.3a\]f=g@H9JBj$'ksl]/7V'BZB6FIC'>kkg]?2pu
%NqjV;)4-O'1q'H96AQ*^RD@?5>#nueg%;BQRDjEDSKk@#'P3)gq_19U.DlCddE"L'\dJMjCsAY*fYFKMXu%kH$NqRW$*#JUGW(1T
%1D'%a!#oc8Q?pS,o-Rus8f>4uQV3\^P^W7NS<d`jlTf'f3e4C@TZ_p-1AaB),Oji'6eehpg/.eHP'14O(t4Xh"PH[L"0MVM<Ggk<
%^??bILUa\0o-VrKZ:o?eA7bKEiG6$U"'$T2$O$!-=+h#fC(&^$;jjZIb#srCGEZf\ZMZYB:]bZf8M/si_$U\dP$!7s2aWb\Q*VD5
%b<cE,#SGEhaqT0>1_fWgrhXEf;i9@gfoXraEcJG$]]G,\&1(k.#N0PhL^L2U6KPFT:SbR`mD\]":_kWZb8k#9?X@"CLVa`'0W@Dg
%,a7ogX>;[%X,3CrY<Ir&;Uqf<-I[kc7UXium):PZ:Sp:lebX17Ynkl6'iBEfhdgmZ`uApb;#%*aU_ip"gL>&9U/XNDK\`$KFqc^,
%p98<QH_u$*`/R7)91=liL$MPGX<#?E;835`QQR86E\i6!LjLd,R9`j,**'rFT`h*#CV"im`7pYq`.`'="]2m5%L.NG2:-N[]0I"u
%O]`/"O$'P#rq:g1W@[n^?3t"D!^YHF1fct41=$QpEbZ%3lDd:`dQJ'WS!Zbpl&tTW\E@U[$DLkK&H*mF3_.WYF2lEOi4h\(92oIT
%$L8//RGeDp#5Ulc5ERF2[=-(5,T$hQ[lA@[.shmmdQe%+%S[e(oLIRmP\!8s.G.$r_Y&cf'NS(;GscMF@rW?$N(B%l'jf1gef1!j
%.T!r&;Y'0/Ytdu3b2uE7&3LZ.BOVd2hWft(B(;6c]BrfbEZ:DSIK\f,Lf2U1"(bhs@[(/$(<E4Y$_s6@5=M'.U,^=s]K1mX5S,3U
%%I.LpN^IT=*h;5+*/OK7?S6q4o<8LhS5%*F&A4<0CHf6NDFtpmQ[94(a*$MC<Y]A3S]pC[!f"nJ#/cSXeY4j+P`=9Rq+81g1::<n
%G8fR#kYYNI\\OS<fTY5(^%llf[=gd)`2$CXB@[cS:e4ee#HTLG3:i0f)4AMITWXCEl.=/XLe=rs.ri>SE]L\rF`+1m]r]c/;'(n<
%fQ.F!X@g9<:Xm7W#jekKL#21uC%0$*oKY&@0D-c=KI<m[gFSK5N11X?>E2=A3XNJJ3nX?n.3MQ^<]4ufp<?FnZP^?IQ00>l,2%(\
%ValuYbR!`V>rfQ#"8&/GIM6rIq!cjXNl:*qn]M6A$0Dj/eE:8MUl2h<>=#]<3O[@4EWns?)bmTqAoo$)SFkd5mgRl/.2/ps)da).
%U%.53#Yfp"n\I$nN>6!k:!Jg/85\?m(!I:#CW1R&M'W?E8UrHVAq9">X[-#8f>(0`2MAKf0Eb8mng97JQu[YMF:W]$VHA^;fBs3,
%&=JpYPi\QcWZU,J9/D;qG<Dc@_\_sMSYp+9A/0)I>:6KNkQP-m2gDc;`oSl%b]"V1Ump<m^I10DqA8C/h;J)I>1YuC8*g%ZTVX@F
%0@J=<_A?m#hr+=A)E2nt[`7tndFYo-72d+(G`g9P&Ej:$>C,32HJ9A/q3q3&^*_a4\F1mRlcU6:0Y10L#%J03FUrLb*jH-E/-PpJ
%VIRPV:.dtc7g8t&We!uu0:&@oXQ?.WkA#$sOIKf=.B6M4$m.?dFt,ED2N\JAN<<!kWXQDNF))fZGoYm-mRlQ(b8\:]<J;_oHUe)V
%pq@etqGTEFdOnVngUhOATY;(b/Kq<#!!qEW;4j0');$3OJg2^5EF)\#H:;566]g%OcZ@pkA6$.fj4aaepuNQK^2>YU6ahuHU,_>g
%TP8^W[gP&)iFk=uBCrF%`^mSObr3rZpO#jQENO:T6.XNLf-EN+Np/JHU-M1j_#T@MT==k&[p)dfFk-V"9Pi@;eL-W-j%:Q(BCVmL
%1@ALT'T%f`g,B],I$p?"<P`%&`FHX6%d_ehi=M(TALYgZ%J*8PDC^3>Kd0!mZN]>12;4oF7TDiWEcAH)GMK#dk%<cN=UEF^b*\os
%`F,"=7YHuokR`-f.:,*D)r)cShe+_0D^FZ(BKi[+X=G$3:dFb')[!!u1(B(>6fJ)J#"mkl<#$AIrIor7=36^<-Gk9tLq0c]Na5H(
%%t^rtB(!/kH@o*HlOVuX%;6*gjJcl&?!WKWN&V_:SrYG(TFo$j\?F@&$?.XQjAFK<aHO4(ki#b=Q%5p3,Kme`)\%ZYG'@hm3i0"N
%mRql'\-G0J1.gO3dCfhG^>%$L.g]4s;0",]l=Yt[MP['!+fpe6#F1gJVtuO`,RJ+<huh2"</89C);m?4K?EVf(<b]g*IHXaiK0sR
%k1ajBl[uRpr<t*aFEktHCG644qD>8ZWK8)W5qoE59Msi9i`mpjN[8KV)%Dk)f4NsVQ\(;3,8VJf^#Fc>J3ZB?="G4if_arNbUju-
%6iK\p1U_NWh8\&)M`E2WY"<]W0a;lZf3);KXOk-k"&W=W`J=1Dl<?t]--c]Za"kFb_d!h#m*=)"`qa0]C%h.i^#nG`lL@$D2MF;l
%qu.m?g3M=Tp.GEq@Ha!S*/K7R!$/KQBFE_mf!qjGU9iBeKO:-G>\tT%$@@*+6n*PcGkIS2OOoh9kk43mDFsaH9@_aAa'&<,bO_FQ
%BBO%?;EKk=</X2\GmW.5M$_s95P;dLO>i+fMk;p(^"e&]=Sjbb2I`RB6RdQp>D1]1-FZ@NHBi;kpVNB=lLUId,6\I%DD'\$:197/
%V5#rP)7!EV?u@9WiKD)a'frbu4]/#`p$T;0jqL'Snk^/m;T(F`=\gF.bc5c*=KKsh+h:@3.UtmcH.Cj\@Y8l,RN,mL_446h>Ig/"
%1O_ABmTZgZ,TC5dC[RTc!d^K6-+e@C];<[o.E78Y/7Vq!F0do<W0:*N^u'CE8#loIN)Id\ngQ[t+-G'u&Hp8jeW]1@!V/b.WY5m[
%p"`13_R>P=G"P^TU411!'.`$fG!X)IN?u5WlrUVXM7,[oS?n=F1/@Fr"CrVNRnV';>X0G"8j9As<>_ZUTp/Kt:#k:Q[DHa0kQ@8A
%PkAO)jQ:LaicVWU5[.VYB\.>#<qNMEXH-3EWB4Vu@*^s[\kq*XP1Xr*TM8?%Ca6f11;o"!<T9Z#PuE=<5<1@A7A<%dne?(T)lnqp
%3=L*JWb])=Cb(F+Oh6Q.Ajrs05[?!K8S"A-Wr`%3j%)_H"@'./T1BrM+*caU9o3ea2h2I"i7H7F=alT[#5'G'\?s^e&/orI)uP@o
%ps%$Hd*KP.J;e]5TD%=HDXA!8ZXeb9i'D/5:onc],'l8.fY&4,=Cs/Jkt-RE.JT[M.`8oca,Td-eig/!D?lK`m?]D?fs2m&9S%_2
%:m]!ra[:b;'=FS@=lBkGdZsid^sVaq,7R1$=g]$n:s9ERT!kBkI>$rB*bHt,=V&b,aEBH3k$^__)@%XG'851p.!es6Zfm>oObS!E
%YGTe(.d='OfYs*^pIC`%&FOF/$-ePcC$='7Caq^S^d_jUi#77fCq@O-nN?8G[)ToC24\bt7.Uab8^6JO1ApcV'j+=;Ob6hgh3T8-
%8ZN-U>b4EM!4h]Ph0)sJHPE;!"$gt'+M)9q"Vf/\`ekP*Nc"hecjc?o4Ip+Y`IJ%hi#r5mAjT\2Q<T.Te?D5n;:'3Z"sYI!Ud-Zs
%2M*9cGI%t,I$f\WkOt/%kQ([b`R[&sK$^n5N:U_\52euWb@]Daj$l8sPkXpuVRTdeljfeCF(UH%ekc;kTH's(?,/o?Xm*2bd0r&B
%#O1hlMJqr#TS4ueK'J'f)dGAU%=eF`G##SW-^Z%l>]m91apr[#eeg`6=:WUAN`G(bp9c$o$4b^?a;DA&Foqs0'lqn!aA+F*L14br
%P&"8*$#I^^<@5>rYrLqS+K")2pU'&VWDU3A*E_Rq5kk+*kuNGuiPDHW'nEoVdE?HSBs8mEa;/G8U(bZl2$TC>"QsB9UL*g:`s1jZ
%_5:m(E7bh[`I,&F\2V4)TjEYm-^4Xc>MTRE]]kNo%irRp'%&>'A3,o.rSLo?#%HR4rlP9^N_%oNV?,$tMMab$7@Z`TB`f\\\hk'<
%4ET$fONN7-<j8Jgb[YI-nl=UF#WC\E2E@V;cXSOS.VO:b+NH`tr2lG"Fa*pKPD+Cb*A$C_EB%dc*H$#G9?70@,5[0bSEe]S?"P=#
%Joo*_V*/j%B)mjj_<cfjIpM'Bh`>FtB68NuAo91[^OQ',;NIMhOkc(1a[lDEZ*8iq<&<Tq#*TH[]HrXpMg;m6S`hII"-jRe''^`T
%oY>356\gQ3D))5PbKH8Hk+9G$fLQrZk14SB_aRtQ6COu(0=?6":"/@%^jsh?W^8f_CJ@29ei,,gAp.i4Vh\U+GZ,ZhQcPk:c?ps[
%rj<`mn"b)#r2"(/f=9c@%$FM,)gM-d;.E.-,OpR_:C`&.heFhMNIkHhnj%!^_8uYGXJB43FFC->N8fLo1eo"1_ENVugp7_TZg7D^
%TV$*[aMUeXEn(3f##_8BM\o>-C?!r)@SA/D7fM@s<U);M1A-f^(6,k:pi/!<+Nf>hf$@[mm:g&.COQ.'f=ICr9a/4C':IgTAH7=8
%XUT#`lBXh_n+I@dfggO>psC0inBp]S^qBRK[]'1`CJ'$,%Jl>"+]:j!Y@SjL4)J=[7[WIq#KEU(5<t1<DF*\lOH#nW^E#<Lp$%]$
%fU7r5BAVpV[fG)=TfP\GjOp8R@U,5:)mEF$f0lr$oOZ*+HI\cQIf80oj0Zl`(<P0`F2-^R^4/,4+'rG[r2$BVJ#/2"l/g(LrW&CX
%e5#4FEnO%/&-e^s2a[_3<E+::f]dYMfYN4g6^=k]ZFp^'\)9=R_1G(m)b@%i$2rXF,l[6%X^B[^He&CHn-T*P:KR>'Y:5D8htqY;
%INUN/1TV!]Wj21+7Xk3ggnc#&N:'&.jG&$ViG5=2-T8bq8%8F/B)-5]NLmE=]7MdD`ZlH)I5Y@F7OlpRdiXP.gFnKoLrHf"K-5aJ
%XTVr[]1FF"Ph2Og?M*[Hr,mM.&%0,Y>PW\ld0RI91kHfU@ibJ/4XsgT%_qVmCIY=pa\^@0>Cf%b*g1g4&,'=UjLl5mkdXDl`MMs4
%/Ya":.RV\g%f*Pf8iA_0bP_>K)>uR*\#i\`5^Eo/5JXs1WY-W=>d%<KVnmRC7RK\sEccI,4S^mq/E)G.B'$4dd9;0/l<&ZRjr2gN
%if[QI'/D+RAP0J2o8;I#06'<L=lA<rR69]=-C=)$M9jsNXUJ4B/crV.78@=(9uI1J.<\[#Vj"2DIQ$Wo>)*RfI<3UhBk30ngFj(D
%+?pcF<1s=:#0P9+iT's)e+.9Q9#$AaSA4WQHaE$ai]eI>nJ_$`*MMH6o)cnj6uq/k@>9>g]!R'$bm`U,ZQFE`CGF3Niqgk;+Mrb=
%.sK"im+,Fu'YmPFEjf^KYUgHl\+!s/=su,7(%__\_0JDu#U''HVp1:"lDeY:UZ`=t;RH'i;P>RBhnjUoJ4U-V0;![b'7%SQo%`-Q
%;9qV"q&aLjMR!qla"T-nh;qt#=;n3N.stb?O-@_r`_ai,+DJ)YUSTLVS3tNG#M6a,U(Fb_\dFmYhTL_X;Dn@a,JN"h)nKP>m%MoG
%,QbGh7Y;./C=6>Gd2Q@Qcun[R>EVPX56'hb)<l'O]Ac@k6^3<QWnaAR3eF,R-O%^D3AVdtN+QY9apO:a<=Q2aLSKkFbCUk@GfH/P
%CW-`!+CN^.=oi%gh4YWE,61.>Zt`OK(MH\HjaJA*gF$e%?<kUpf'Zl;rk"bp$i@X=Hr`;7_CS](%T_5lIdg4PZH_e<`)9Zir5"G$
%oaAKuY.aisPicV*Ee$&M=Yg%*^_)MY@9Jkr`A2*o2&CJr%ck-$PA]CU/?!0+p\<=so%i3)A@1csGm4s.s%ItDo%p3&6n+Oc$A_8X
%XREli,%Ig:=SMR"Cr>'m(WWXbpL*udfk_e[8EF_I<Q0NP_7K&H1J/S51%j"@6NS=.m!"NZrMn=lBsPK6g.X+a+)F<Pnn#6GR<[SR
%H(YHYk4^oDP>+/?`UkQ4AGm[d*q\s"IGnGS?U"^iPW44WQK!$s?#`N#&8*$,K1L\/i\$Pt@Mi]#2=V4CfmIG"Il2t-!2aZ(E.o'"
%-'sr<OMbX!mG,,"Er=X!3]JSXZ2N_E?@ZG]7o'SP9+.bdZ#"F^!)ZpAA%XWs$#t.;F>OUqM:]A[KDMUsr\qUB]U)=R3B]JMSGB)o
%??=-U,h+cce$"snBd^,?qV]R-#Vj8CbAO4[9Yf;YX*[9J,$)%hcjh5$3=(Re\$lIbXIc0eHUmoG:gb$#>sE5b[IcUO5BX4?`=W#g
%XY&*m>'%Zdh*$?88njgI.tU$m\/'23rpnH0/:eS@&XFKh&0E:e_5R@+klVVd=9l&K!S?m>T=e*\!Fi%q48h2H9T@F>#2'\i4RF.(
%g$B1\ij#6-SP>e0mQ2o0=,JXXRPZA'TKJ3C<(4kf@C>uI+\#f\MoXQ7-=aUAS^"Z:r4;a#6Xb64cH]s\4Y(-8f=QFk@I^b1976S<
%l)9/NX\2Es*%SUq,iIM=@JrL`#O7t1\?8XopJG;1CC-/ShQ0l4G0G7<oY0-jZkBtcfr&r1m%O'8$MA=%*lT(Xm87MPq`='G,S?o@
%I37J#XelkCPk8*P$dCVuq%/&C[*MJ3p=Q]hElYA-Pe2-j4tWoi+U;]_pi$,u1TdDYdbGuuF,,#.Gjiu!o`n26g@``.j@fAp!`>!9
%:G-Amn4paD@Cf^0>akNMJoF-h]8s(L6<n&i_[NaZ0&T,]4:O0URlL-bELW=PgJFXPhDCBdR)65aVFn?nUMI-R9r=&(GX$uAnEZBA
%:d1s]chk6^'%b>epSbb/*ut)(r9:PJi5`pc'c,E*#LMkYYPhj2?[_o;#?fctHTnn&0Rp7fV@FPW.0/WTO0gujPeb8JaB9\.^j$Y=
%R&<>dX!ANrWQsbI%6H9=AW`u$/ou*k`-Y?^1kaI%.@C"S_03FrAP=u=5I[@3Y)15;mt\!]_#)qO%J;,4^No=Vn"8\6]T1A84C6?h
%@sd:_)-pMFr:.bVcQ?S#rTl9<3bRXM%<6>Ebdo%aqhotF3:'JBI(]MNqQgmlSJ9=?5_4aj80k<gBVC<Z/Gb9/U?\a8TI3a;JNHWB
%mL/m'Z'K.2R0hjgG9YQ'0<`Qg'QE,>hq[+lk_-^#DADj9HbFL5@/X<XeD,HU$3945oAF\^-o1Y5d4X?1?s`5@Y-9G[I(Mu'.ft^,
%d?:*tF9Cq<A:BroaWA2PgYd/nNqXb'7U\f]b"i#T!`m^>#dl_U(V>m*TFlb#]A%nG&QCg#VkQs]G<;_Wl]I2JcrPQ_eoTT8#G:jm
%6hr-?n[WPPF)mhq^lH*?3X<nuVFcu9,VA@aJchqckRPS#!'K/=7_X7BTH+17!WP0n=+hq?C7.@b^!mf%J]s"[4d;pq:FXoH5V4Ik
%<+rE`\#Mh4q0*TeQDNM59k\&;G4(O7%"c9#7c3c,YBij.s6@AZWJ((gWr'ME"[)S$O,lNr_ok77r=>?Xf;j`*pQm7g,l)SSlq4SX
%Zsa4q.T-@OZ(gdT>s.J;;\N^OF[j]S0q+2\)`98FPg=sT(%Vn4Is*P#ME\3G/us(gAQ[k2\F.-BL@1=ifP"CK#cX7ILWcql9FF!p
%9L4];%<<t0OfQmN$3d8ehXh"qs0[?r&(;`K=X)0/c)C/MWg:Y<k2l_(OQ`gdd4@'XZ`*a)`j2KTk_Y=A^]t<\NC&+'-B^jB;Vi=[
%OcT?sMrL#An^75B-pINo%i21LLXM3oSAd[961@`(CZXN\HN.qeIBZ\XMgU)8S23d^>"CnSroc6>6c6VVB_Q<*n0\A>%678$X=(H7
%3dD;TA-Rf!7`2UYWVk\YIW/VBG^St`"s'9ia^6LDH]B<GHqA\VI(K=IH*niLXe%$#?YnFr*EA]*a?YA<=<Sd#UkF6a=?M'U*dtuI
%a.Ecu[%Lu5M_7Hb)(BCTC"'Q<r:/17HMb[(6?2W*!t2o9DqLf,4=NhW+p[o,?#TH5YQ$uhU5msr(f,#]ZiX<kpLT'qctK\0Ohc^:
%)1kLW'lqrF%su1UGct#ndj>WJC9A!0AGfFd,![-!<C75'=gltfN"rL&=r4BmPi]aY@4WIIbm/NSV@80&d_IW8[FM$Tfg;\0UUBdo
%n_+<jgYM&*UCSY$_L(oc)euGQkZ.ZC]R;BmDp"Qsm8D[_M<!]DY1Q1l3W;O(mh[n2,MhicLO?f]hEF,_XbE&jZJZA!60B%2*clc1
%.!;>Bcq?+F*5>.>g9_O@eLZb0!mi2R^"X/3"oJP>"\`.B1I3*>K(gB+>3H@6@$,)RjI(q8$4ph@A?n8Mc,iRIQdh1hj&_3X/GD(6
%NmtP!#PEkE[!s59;_Q3p)WHW.r,u9=K<:9>eZp_%UkA?f!#22bZ8+*EQ7+_$Wd$(=;pUbj(;$mg)SmSgM2%g1*5?Htd.;mm_b@q?
%Dc3,sZd2:b\ORYY85:-+B^RKlBgu_NjI@Y4<E_u03%nW6puq:C)sH^H-De>"+ei]JV1A*'U#o:-%)S95O(+6i1'=%OL][Po5pc_u
%:i;S.TeZ$H]*]jO!N9"m1ok-8[37P4rWGW[7`^$=J58HYqb!W5(V:HsO$GF9YA4e#_7$qQq>=YJfpf+E9]eYLpcS[i`BJl'ga'et
%4,NPe/RSg4n_0172ci0X"U9gC'+%<Kd55ki[0*oQ,g&!>D-@,+*JPg%*klS^Q55CSQ.%gB.^=ONAni\=o!,a1_HLj)TTPm)b"?X:
%_5-%+YO*m'^9^P[*sc%F8"^8'#g=#+JWsTVE)$)@Jfo>UboUt/asB*,?0^HrUC"kU%t<Vn*LK96*]GA$MIdK8'5`b?k"\U@JYp!;
%L0F@sCb!qZFS!SJ9chH2)QBm.!t1oh1$-U2,8slIo\Os3@^3NgIB^s@PB)XHV&^8FLlDo7(ob8c$aX>5j44Y/2(03aS(s\plWAaa
%B3MjkY2?h%Jk`>$fl>:)[37eN+s\`,Be[DsH0$Y))FkTfD1]8*MG"$UKELR^C%DV]?`$E:?4f=aB8S,M@Zhhtb;["7_>;qYlPL$h
%aLY367>$ML$Ype(gl'o"Z@/ieWNlbFYiR%DK0Gc=QD"8HaJm#J1Csc619%G[j3h3iE+h7cDb$-t<JPTHFV]WVJRf1XK$Wsf'p`@j
%kXdK?8AZ<sUclf_Z2H:0<+Jj]GG7#^/re`5eKDA^GL@TY&S`Re-c(EnJlWLP)]FE#q6#9ffNUWakW,"pDZXirWE=!1'p'c()C((F
%G,lbO#'Esh$jg:R]KZZ\V-^1Lm]&-7M`t-@:D^1aCFfA1)W6<ml\@e(1/;^WURIkIRt.!H@54XInl`>"(igU573B#ggC4r(V*6;m
%Z"0Q-g5`mT)eBabC@s!_h*T`LBtt]9(j)TSHIF>=M+RsCh.O<#jV/8Eon:7A8BZpb]B(ugS`'Fe,at3"7FmAD$0#\`GSg]b(e9HZ
%n$RkYj+Gd9p6!r=e)!2*j/6"r^3A_3;u4,R&]V=%ZsfAkH?@KX21T0CE*ph&1Z9F[5-SYKq)oWTVQ,dsFIaL2^g7a=%Uddkk@4(R
%]NtS")\"<0+R^odkA!5gK9,sg>QNDQ$k]Nh@?OJBe%BWLR+ud%lm/t?*lof`ChU&MD+nOrO>0,I[l/jLQ``88qIh/<g9;Ioq18&'
%ht00YX36L\UW5')b+UMdS>uO=7ZDZ?gj0P'om(CfS:t6m:"N(*>3qZpp+]bqqD"1*Me$DHYFo8,Z0ncZkRt5KX,do!G3^'&]/G=,
%j##@'\j#(Lic<*E'r"D2\@'*Tk&M3dqpf;\DXa6:C(%CcfM&nZL*"h:c(g!j\si:BAK?gRnL6`fh1*-As67;lhu2@qr6KT%s-KAX
%psW$*i&C]'pODu6^]3ius80^[J,JWIqSPPtrm*gDq>EPU"('sLJ%GXDbocr[o0<8IJ,J?QDuTQ^rT!p3";dU:Ie0&DqtpEaf73Jn
%!%#FNlM~>
%AI9_PrivateDataEnd
